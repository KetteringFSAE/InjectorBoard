   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	12
  22      00000000 
  22      00000000 
  23              		.section	.text.PWM1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PWM1_Init
  26              		.code	16
  27              		.thumb_func
  29              	PWM1_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/PWM1.c"
   1:../Generated_Code/PWM1.c **** /* ###################################################################
   2:../Generated_Code/PWM1.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/PWM1.c **** **     Filename    : PWM1.c
   4:../Generated_Code/PWM1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/PWM1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/PWM1.c **** **     Component   : PWM_LDD
   7:../Generated_Code/PWM1.c **** **     Version     : Component 01.013, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/PWM1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/PWM1.c **** **     Date/Time   : 2017-02-22, 20:38, # CodeGen: 25
  10:../Generated_Code/PWM1.c **** **     Abstract    :
  11:../Generated_Code/PWM1.c **** **          This component implements a pulse-width modulation generator
  12:../Generated_Code/PWM1.c **** **          that generates signal with variable duty and fixed cycle.
  13:../Generated_Code/PWM1.c **** **          This PWM component provides a high level API for unified
  14:../Generated_Code/PWM1.c **** **          hardware access to various timer devices using the TimerUnit
  15:../Generated_Code/PWM1.c **** **          component.
  16:../Generated_Code/PWM1.c **** **     Settings    :
  17:../Generated_Code/PWM1.c **** **          Component name                                 : PWM1
  18:../Generated_Code/PWM1.c **** **          Period device                                  : TPM0_MOD
  19:../Generated_Code/PWM1.c **** **          Duty device                                    : TPM0_C2V
  20:../Generated_Code/PWM1.c **** **          Output pin                                     : PTC3/LLWU_P7/UART1_RX/TPM0_CH2/CLKOUTa
  21:../Generated_Code/PWM1.c **** **          Output pin signal                              : 
  22:../Generated_Code/PWM1.c **** **          Counter                                        : TPM0_CNT
  23:../Generated_Code/PWM1.c **** **          Interrupt service/event                        : Disabled
  24:../Generated_Code/PWM1.c **** **          Period                                         : 1 µs
  25:../Generated_Code/PWM1.c **** **          Starting pulse width                           : 0.5 µs
  26:../Generated_Code/PWM1.c **** **          Initial polarity                               : low
  27:../Generated_Code/PWM1.c **** **          Initialization                                 : 
  28:../Generated_Code/PWM1.c **** **            Enabled in init. code                        : yes
  29:../Generated_Code/PWM1.c **** **            Auto initialization                          : yes
  30:../Generated_Code/PWM1.c **** **            Event mask                                   : 
  31:../Generated_Code/PWM1.c **** **              OnEnd                                      : Disabled
  32:../Generated_Code/PWM1.c **** **          CPU clock/configuration selection              : 
  33:../Generated_Code/PWM1.c **** **            Clock configuration 0                        : This component enabled
  34:../Generated_Code/PWM1.c **** **            Clock configuration 1                        : This component disabled
  35:../Generated_Code/PWM1.c **** **            Clock configuration 2                        : This component disabled
  36:../Generated_Code/PWM1.c **** **            Clock configuration 3                        : This component disabled
  37:../Generated_Code/PWM1.c **** **            Clock configuration 4                        : This component disabled
  38:../Generated_Code/PWM1.c **** **            Clock configuration 5                        : This component disabled
  39:../Generated_Code/PWM1.c **** **            Clock configuration 6                        : This component disabled
  40:../Generated_Code/PWM1.c **** **            Clock configuration 7                        : This component disabled
  41:../Generated_Code/PWM1.c **** **          Referenced components                          : 
  42:../Generated_Code/PWM1.c **** **            Linked component                             : TU1
  43:../Generated_Code/PWM1.c **** **     Contents    :
  44:../Generated_Code/PWM1.c **** **         Init       - LDD_TDeviceData* PWM1_Init(LDD_TUserData *UserDataPtr);
  45:../Generated_Code/PWM1.c **** **         SetRatio16 - LDD_TError PWM1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio);
  46:../Generated_Code/PWM1.c **** **         SetDutyMS  - LDD_TError PWM1_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);
  47:../Generated_Code/PWM1.c **** **
  48:../Generated_Code/PWM1.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  49:../Generated_Code/PWM1.c **** **     All Rights Reserved.
  50:../Generated_Code/PWM1.c **** **     
  51:../Generated_Code/PWM1.c **** **     Redistribution and use in source and binary forms, with or without modification,
  52:../Generated_Code/PWM1.c **** **     are permitted provided that the following conditions are met:
  53:../Generated_Code/PWM1.c **** **     
  54:../Generated_Code/PWM1.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  55:../Generated_Code/PWM1.c **** **       of conditions and the following disclaimer.
  56:../Generated_Code/PWM1.c **** **     
  57:../Generated_Code/PWM1.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  58:../Generated_Code/PWM1.c **** **       list of conditions and the following disclaimer in the documentation and/or
  59:../Generated_Code/PWM1.c **** **       other materials provided with the distribution.
  60:../Generated_Code/PWM1.c **** **     
  61:../Generated_Code/PWM1.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  62:../Generated_Code/PWM1.c **** **       contributors may be used to endorse or promote products derived from this
  63:../Generated_Code/PWM1.c **** **       software without specific prior written permission.
  64:../Generated_Code/PWM1.c **** **     
  65:../Generated_Code/PWM1.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  66:../Generated_Code/PWM1.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  67:../Generated_Code/PWM1.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  68:../Generated_Code/PWM1.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  69:../Generated_Code/PWM1.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  70:../Generated_Code/PWM1.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  71:../Generated_Code/PWM1.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  72:../Generated_Code/PWM1.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  73:../Generated_Code/PWM1.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  74:../Generated_Code/PWM1.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  75:../Generated_Code/PWM1.c **** **     
  76:../Generated_Code/PWM1.c **** **     http: www.freescale.com
  77:../Generated_Code/PWM1.c **** **     mail: support@freescale.com
  78:../Generated_Code/PWM1.c **** ** ###################################################################*/
  79:../Generated_Code/PWM1.c **** /*!
  80:../Generated_Code/PWM1.c **** ** @file PWM1.c
  81:../Generated_Code/PWM1.c **** ** @version 01.03
  82:../Generated_Code/PWM1.c **** ** @brief
  83:../Generated_Code/PWM1.c **** **          This component implements a pulse-width modulation generator
  84:../Generated_Code/PWM1.c **** **          that generates signal with variable duty and fixed cycle.
  85:../Generated_Code/PWM1.c **** **          This PWM component provides a high level API for unified
  86:../Generated_Code/PWM1.c **** **          hardware access to various timer devices using the TimerUnit
  87:../Generated_Code/PWM1.c **** **          component.
  88:../Generated_Code/PWM1.c **** */         
  89:../Generated_Code/PWM1.c **** /*!
  90:../Generated_Code/PWM1.c **** **  @addtogroup PWM1_module PWM1 module documentation
  91:../Generated_Code/PWM1.c **** **  @{
  92:../Generated_Code/PWM1.c **** */         
  93:../Generated_Code/PWM1.c **** 
  94:../Generated_Code/PWM1.c **** /* MODULE PWM1. */
  95:../Generated_Code/PWM1.c **** 
  96:../Generated_Code/PWM1.c **** #include "PWM1.h"
  97:../Generated_Code/PWM1.c **** /* {Default RTOS Adapter} No RTOS includes */
  98:../Generated_Code/PWM1.c **** 
  99:../Generated_Code/PWM1.c **** #ifdef __cplusplus
 100:../Generated_Code/PWM1.c **** extern "C" {
 101:../Generated_Code/PWM1.c **** #endif 
 102:../Generated_Code/PWM1.c **** 
 103:../Generated_Code/PWM1.c **** typedef struct {
 104:../Generated_Code/PWM1.c ****   LDD_TDeviceData *LinkedDeviceDataPtr;
 105:../Generated_Code/PWM1.c ****   bool EnUser;                         /* Enable/Disable device */
 106:../Generated_Code/PWM1.c ****   uint16_t RatioStore;                 /* Ratio of L-level to H-level */
 107:../Generated_Code/PWM1.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 108:../Generated_Code/PWM1.c **** } PWM1_TDeviceData;
 109:../Generated_Code/PWM1.c **** 
 110:../Generated_Code/PWM1.c **** typedef PWM1_TDeviceData *PWM1_TDeviceDataPtr; /* Pointer to the device data structure. */
 111:../Generated_Code/PWM1.c **** 
 112:../Generated_Code/PWM1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 113:../Generated_Code/PWM1.c **** static PWM1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 114:../Generated_Code/PWM1.c **** 
 115:../Generated_Code/PWM1.c **** #define CHANNEL 0x00U
 116:../Generated_Code/PWM1.c **** /* Internal method prototypes */
 117:../Generated_Code/PWM1.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr);
 118:../Generated_Code/PWM1.c **** /*
 119:../Generated_Code/PWM1.c **** ** ===================================================================
 120:../Generated_Code/PWM1.c **** **     Method      :  PWM1_Init (component PWM_LDD)
 121:../Generated_Code/PWM1.c **** */
 122:../Generated_Code/PWM1.c **** /*!
 123:../Generated_Code/PWM1.c **** **     @brief
 124:../Generated_Code/PWM1.c **** **         Initializes the device. Allocates memory for the device data
 125:../Generated_Code/PWM1.c **** **         structure, allocates interrupt vectors and sets interrupt
 126:../Generated_Code/PWM1.c **** **         priority, sets pin routing, sets timing, etc. If the
 127:../Generated_Code/PWM1.c **** **         property ["Enable in init. code"] is set to "yes" value then
 128:../Generated_Code/PWM1.c **** **         the device is also enabled (see the description of the
 129:../Generated_Code/PWM1.c **** **         [Enable] method). In this case the [Enable] method is not
 130:../Generated_Code/PWM1.c **** **         necessary and needn't to be generated. This method can be
 131:../Generated_Code/PWM1.c **** **         called only once. Before the second call of Init the [Deinit]
 132:../Generated_Code/PWM1.c **** **         must be called first.
 133:../Generated_Code/PWM1.c **** **     @param
 134:../Generated_Code/PWM1.c **** **         UserDataPtr     - Pointer to the user or
 135:../Generated_Code/PWM1.c **** **                           RTOS specific data. This pointer will be
 136:../Generated_Code/PWM1.c **** **                           passed as an event or callback parameter.
 137:../Generated_Code/PWM1.c **** **     @return
 138:../Generated_Code/PWM1.c **** **                         - Pointer to the dynamically allocated private
 139:../Generated_Code/PWM1.c **** **                           structure or NULL if there was an error.
 140:../Generated_Code/PWM1.c **** */
 141:../Generated_Code/PWM1.c **** /* ===================================================================*/
 142:../Generated_Code/PWM1.c **** LDD_TDeviceData* PWM1_Init(LDD_TUserData *UserDataPtr)
 143:../Generated_Code/PWM1.c **** {
  32              		.loc 1 143 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 144:../Generated_Code/PWM1.c ****   /* Allocate device structure */
 145:../Generated_Code/PWM1.c ****   PWM1_TDeviceData *DeviceDataPrv;
 146:../Generated_Code/PWM1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 147:../Generated_Code/PWM1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 147 0
  47 0008 104B     		ldr	r3, .L4
  48 000a FB60     		str	r3, [r7, #12]
 148:../Generated_Code/PWM1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  49              		.loc 1 148 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 7A68     		ldr	r2, [r7, #4]
  52 0010 9A60     		str	r2, [r3, #8]
 149:../Generated_Code/PWM1.c ****   DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
  53              		.loc 1 149 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 0122     		mov	r2, #1
  56 0016 1A71     		strb	r2, [r3, #4]
 150:../Generated_Code/PWM1.c ****   DeviceDataPrv->RatioStore = 0x7D64U; /* Ratio after initialization */
  57              		.loc 1 150 0
  58 0018 FB68     		ldr	r3, [r7, #12]
  59 001a 0D4A     		ldr	r2, .L4+4
  60 001c DA80     		strh	r2, [r3, #6]
 151:../Generated_Code/PWM1.c ****   /* Registration of the device structure */
 152:../Generated_Code/PWM1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PWM1_ID,DeviceDataPrv);
  61              		.loc 1 152 0
  62 001e 0D4B     		ldr	r3, .L4+8
  63 0020 FA68     		ldr	r2, [r7, #12]
  64 0022 DA60     		str	r2, [r3, #12]
 153:../Generated_Code/PWM1.c ****   DeviceDataPrv->LinkedDeviceDataPtr = TU1_Init((LDD_TUserData *)NULL);
  65              		.loc 1 153 0
  66 0024 0020     		mov	r0, #0
  67 0026 FFF7FEFF 		bl	TU1_Init
  68 002a 021C     		mov	r2, r0
  69 002c FB68     		ldr	r3, [r7, #12]
  70 002e 1A60     		str	r2, [r3]
 154:../Generated_Code/PWM1.c ****   if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful?
  71              		.loc 1 154 0
  72 0030 FB68     		ldr	r3, [r7, #12]
  73 0032 1B68     		ldr	r3, [r3]
  74 0034 002B     		cmp	r3, #0
  75 0036 04D1     		bne	.L2
 155:../Generated_Code/PWM1.c ****     /* Unregistration of the device structure */
 156:../Generated_Code/PWM1.c ****     PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PWM1_ID);
  76              		.loc 1 156 0
  77 0038 064B     		ldr	r3, .L4+8
  78 003a 0022     		mov	r2, #0
  79 003c DA60     		str	r2, [r3, #12]
 157:../Generated_Code/PWM1.c ****     /* Deallocation of the device structure */
 158:../Generated_Code/PWM1.c ****     /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deall
 159:../Generated_Code/PWM1.c ****     return NULL;                       /* If so, then the PWM initialization is also unsuccessful *
  80              		.loc 1 159 0
  81 003e 0023     		mov	r3, #0
  82 0040 00E0     		b	.L3
  83              	.L2:
 160:../Generated_Code/PWM1.c ****   }
 161:../Generated_Code/PWM1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  84              		.loc 1 161 0
  85 0042 FB68     		ldr	r3, [r7, #12]
  86              	.L3:
 162:../Generated_Code/PWM1.c **** }
  87              		.loc 1 162 0
  88 0044 181C     		mov	r0, r3
  89 0046 BD46     		mov	sp, r7
  90 0048 04B0     		add	sp, sp, #16
  91              		@ sp needed for prologue
  92 004a 80BD     		pop	{r7, pc}
  93              	.L5:
  94              		.align	2
  95              	.L4:
  96 004c 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  97 0050 647D0000 		.word	32100
  98 0054 00000000 		.word	PE_LDD_DeviceDataList
  99              		.cfi_endproc
 100              	.LFE0:
 102              		.section	.text.PWM1_SetRatio16,"ax",%progbits
 103              		.align	2
 104              		.global	PWM1_SetRatio16
 105              		.code	16
 106              		.thumb_func
 108              	PWM1_SetRatio16:
 109              	.LFB1:
 163:../Generated_Code/PWM1.c **** 
 164:../Generated_Code/PWM1.c **** /*
 165:../Generated_Code/PWM1.c **** ** ===================================================================
 166:../Generated_Code/PWM1.c **** **     Method      :  PWM1_SetRatio16 (component PWM_LDD)
 167:../Generated_Code/PWM1.c **** */
 168:../Generated_Code/PWM1.c **** /*!
 169:../Generated_Code/PWM1.c **** **     @brief
 170:../Generated_Code/PWM1.c **** **         This method sets a new duty-cycle ratio. Ratio is expressed
 171:../Generated_Code/PWM1.c **** **         as a 16-bit unsigned integer number. 0 - FFFF value is
 172:../Generated_Code/PWM1.c **** **         proportional to ratio 0 - 100%. The method is available
 173:../Generated_Code/PWM1.c **** **         only if it is not selected list of predefined values in
 174:../Generated_Code/PWM1.c **** **         [Starting pulse width] property. 
 175:../Generated_Code/PWM1.c **** **         Note: Calculated duty depends on the timer possibilities and
 176:../Generated_Code/PWM1.c **** **         on the selected period.
 177:../Generated_Code/PWM1.c **** **     @param
 178:../Generated_Code/PWM1.c **** **         DeviceDataPtr   - Device data structure
 179:../Generated_Code/PWM1.c **** **                           pointer returned by [Init] method.
 180:../Generated_Code/PWM1.c **** **     @param
 181:../Generated_Code/PWM1.c **** **         Ratio           - Ratio to set. 0 - 65535 value is
 182:../Generated_Code/PWM1.c **** **                           proportional to ratio 0 - 100%
 183:../Generated_Code/PWM1.c **** **     @return
 184:../Generated_Code/PWM1.c **** **                         - Error code, possible codes:
 185:../Generated_Code/PWM1.c **** **                           ERR_OK - OK
 186:../Generated_Code/PWM1.c **** **                           ERR_SPEED - The component does not work in
 187:../Generated_Code/PWM1.c **** **                           the active clock configuration
 188:../Generated_Code/PWM1.c **** */
 189:../Generated_Code/PWM1.c **** /* ===================================================================*/
 190:../Generated_Code/PWM1.c **** LDD_TError PWM1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
 191:../Generated_Code/PWM1.c **** {
 110              		.loc 1 191 0
 111              		.cfi_startproc
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 84B0     		sub	sp, sp, #16
 118              	.LCFI4:
 119              		.cfi_def_cfa_offset 24
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI5:
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
 124 0008 0A1C     		mov	r2, r1
 125 000a BB1C     		add	r3, r7, #2
 126 000c 1A80     		strh	r2, [r3]
 192:../Generated_Code/PWM1.c ****   PWM1_TDeviceData *DeviceDataPrv = (PWM1_TDeviceData *)DeviceDataPtr;
 127              		.loc 1 192 0
 128 000e 7B68     		ldr	r3, [r7, #4]
 129 0010 FB60     		str	r3, [r7, #12]
 193:../Generated_Code/PWM1.c **** 
 194:../Generated_Code/PWM1.c ****   DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
 130              		.loc 1 194 0
 131 0012 FB68     		ldr	r3, [r7, #12]
 132 0014 BA1C     		add	r2, r7, #2
 133 0016 1288     		ldrh	r2, [r2]
 134 0018 DA80     		strh	r2, [r3, #6]
 195:../Generated_Code/PWM1.c ****   SetRatio(DeviceDataPtr);
 135              		.loc 1 195 0
 136 001a 7B68     		ldr	r3, [r7, #4]
 137 001c 181C     		mov	r0, r3
 138 001e FFF7FEFF 		bl	SetRatio
 196:../Generated_Code/PWM1.c ****   return ERR_OK;
 139              		.loc 1 196 0
 140 0022 0023     		mov	r3, #0
 197:../Generated_Code/PWM1.c **** }
 141              		.loc 1 197 0
 142 0024 181C     		mov	r0, r3
 143 0026 BD46     		mov	sp, r7
 144 0028 04B0     		add	sp, sp, #16
 145              		@ sp needed for prologue
 146 002a 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE1:
 150              		.section	.text.PWM1_SetDutyMS,"ax",%progbits
 151              		.align	2
 152              		.global	PWM1_SetDutyMS
 153              		.code	16
 154              		.thumb_func
 156              	PWM1_SetDutyMS:
 157              	.LFB2:
 198:../Generated_Code/PWM1.c **** 
 199:../Generated_Code/PWM1.c **** /*
 200:../Generated_Code/PWM1.c **** ** ===================================================================
 201:../Generated_Code/PWM1.c **** **     Method      :  PWM1_SetDutyMS (component PWM_LDD)
 202:../Generated_Code/PWM1.c **** */
 203:../Generated_Code/PWM1.c **** /*!
 204:../Generated_Code/PWM1.c **** **     @brief
 205:../Generated_Code/PWM1.c **** **         This method sets the new duty value of the output signal.
 206:../Generated_Code/PWM1.c **** **         The duty is expressed in milliseconds as a 16-bit unsigned
 207:../Generated_Code/PWM1.c **** **         integer number. The method is available only if it is not
 208:../Generated_Code/PWM1.c **** **         selected list of predefined values in [Starting pulse width]
 209:../Generated_Code/PWM1.c **** **         property.
 210:../Generated_Code/PWM1.c **** **     @param
 211:../Generated_Code/PWM1.c **** **         DeviceDataPtr   - Device data structure
 212:../Generated_Code/PWM1.c **** **                           pointer returned by [Init] method.
 213:../Generated_Code/PWM1.c **** **     @param
 214:../Generated_Code/PWM1.c **** **         Time            - Duty to set [in milliseconds]
 215:../Generated_Code/PWM1.c **** **     @return
 216:../Generated_Code/PWM1.c **** **                         - Error code, possible codes:
 217:../Generated_Code/PWM1.c **** **                           ERR_OK - OK
 218:../Generated_Code/PWM1.c **** **                           ERR_SPEED - The component does not work in
 219:../Generated_Code/PWM1.c **** **                           the active clock configuration
 220:../Generated_Code/PWM1.c **** **                           ERR_MATH - Overflow during evaluation
 221:../Generated_Code/PWM1.c **** **                           ERR_PARAM_RANGE - Parameter out of range
 222:../Generated_Code/PWM1.c **** */
 223:../Generated_Code/PWM1.c **** /* ===================================================================*/
 224:../Generated_Code/PWM1.c **** LDD_TError PWM1_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 225:../Generated_Code/PWM1.c **** {
 158              		.loc 1 225 0
 159              		.cfi_startproc
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI6:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 84B0     		sub	sp, sp, #16
 166              	.LCFI7:
 167              		.cfi_def_cfa_offset 24
 168 0004 00AF     		add	r7, sp, #0
 169              	.LCFI8:
 170              		.cfi_def_cfa_register 7
 171 0006 7860     		str	r0, [r7, #4]
 172 0008 0A1C     		mov	r2, r1
 173 000a BB1C     		add	r3, r7, #2
 174 000c 1A80     		strh	r2, [r3]
 226:../Generated_Code/PWM1.c ****   PWM1_TDeviceData *DeviceDataPrv = (PWM1_TDeviceData *)DeviceDataPtr;
 175              		.loc 1 226 0
 176 000e 7B68     		ldr	r3, [r7, #4]
 177 0010 FB60     		str	r3, [r7, #12]
 227:../Generated_Code/PWM1.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 228:../Generated_Code/PWM1.c **** 
 229:../Generated_Code/PWM1.c ****   /* Period is too little. Method 'SetDutyMS' will return only error code. */
 230:../Generated_Code/PWM1.c ****   (void)Time;                          /* Parameter is not used, suppress unused argument warning *
 231:../Generated_Code/PWM1.c ****   (void)DeviceDataPrv;                 /* Variable is not used, suppress unused argument warning */
 232:../Generated_Code/PWM1.c ****   rtval = 0;                           /* Suppress variable used before set warning */
 178              		.loc 1 232 0
 179 0012 0023     		mov	r3, #0
 180 0014 BB60     		str	r3, [r7, #8]
 233:../Generated_Code/PWM1.c ****   (void)rtval;                         /* Variable is not used, suppress unused argument warning */
 234:../Generated_Code/PWM1.c ****   return ERR_MATH;                     /* Calculation error */
 181              		.loc 1 234 0
 182 0016 0523     		mov	r3, #5
 235:../Generated_Code/PWM1.c **** }
 183              		.loc 1 235 0
 184 0018 181C     		mov	r0, r3
 185 001a BD46     		mov	sp, r7
 186 001c 04B0     		add	sp, sp, #16
 187              		@ sp needed for prologue
 188 001e 80BD     		pop	{r7, pc}
 189              		.cfi_endproc
 190              	.LFE2:
 192              		.section	.text.SetRatio,"ax",%progbits
 193              		.align	2
 194              		.code	16
 195              		.thumb_func
 197              	SetRatio:
 198              	.LFB3:
 236:../Generated_Code/PWM1.c **** 
 237:../Generated_Code/PWM1.c **** /*
 238:../Generated_Code/PWM1.c **** ** ===================================================================
 239:../Generated_Code/PWM1.c **** **     Method      :  SetRatio (component PWM_LDD)
 240:../Generated_Code/PWM1.c **** **
 241:../Generated_Code/PWM1.c **** **     Description :
 242:../Generated_Code/PWM1.c **** **         This method calculates new value of duty compare register from 
 243:../Generated_Code/PWM1.c **** **         variable RatioStore.
 244:../Generated_Code/PWM1.c **** **         This method is internal. It is used by Processor Expert only.
 245:../Generated_Code/PWM1.c **** ** ===================================================================
 246:../Generated_Code/PWM1.c **** */
 247:../Generated_Code/PWM1.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
 248:../Generated_Code/PWM1.c **** {
 199              		.loc 1 248 0
 200              		.cfi_startproc
 201 0000 80B5     		push	{r7, lr}
 202              	.LCFI9:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 86B0     		sub	sp, sp, #24
 207              	.LCFI10:
 208              		.cfi_def_cfa_offset 32
 209 0004 00AF     		add	r7, sp, #0
 210              	.LCFI11:
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 249:../Generated_Code/PWM1.c ****   PWM1_TDeviceData *DeviceDataPrv = (PWM1_TDeviceData*)DeviceDataPtr;
 213              		.loc 1 249 0
 214 0008 7B68     		ldr	r3, [r7, #4]
 215 000a 3B61     		str	r3, [r7, #16]
 250:../Generated_Code/PWM1.c ****   uint16_t Period;
 251:../Generated_Code/PWM1.c ****   uint16_t Duty;
 252:../Generated_Code/PWM1.c **** 
 253:../Generated_Code/PWM1.c ****   (void)TU1_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
 216              		.loc 1 253 0
 217 000c 3B69     		ldr	r3, [r7, #16]
 218 000e 1A68     		ldr	r2, [r3]
 219 0010 3B1C     		mov	r3, r7
 220 0012 0E33     		add	r3, r3, #14
 221 0014 101C     		mov	r0, r2
 222 0016 191C     		mov	r1, r3
 223 0018 FFF7FEFF 		bl	TU1_GetPeriodTicks
 254:../Generated_Code/PWM1.c ****   if (Period == 0U) {
 224              		.loc 1 254 0
 225 001c 3B1C     		mov	r3, r7
 226 001e 0E33     		add	r3, r3, #14
 227 0020 1B88     		ldrh	r3, [r3]
 228 0022 002B     		cmp	r3, #0
 229 0024 05D1     		bne	.L11
 255:../Generated_Code/PWM1.c ****     Duty = DeviceDataPrv->RatioStore;
 230              		.loc 1 255 0
 231 0026 3B1C     		mov	r3, r7
 232 0028 1633     		add	r3, r3, #22
 233 002a 3A69     		ldr	r2, [r7, #16]
 234 002c D288     		ldrh	r2, [r2, #6]
 235 002e 1A80     		strh	r2, [r3]
 236 0030 0CE0     		b	.L12
 237              	.L11:
 256:../Generated_Code/PWM1.c ****   }
 257:../Generated_Code/PWM1.c ****   else {
 258:../Generated_Code/PWM1.c ****     Duty = (uint16_t)((((uint32_t)(Period) * DeviceDataPrv->RatioStore) + 0x8000) >> 0x10);
 238              		.loc 1 258 0
 239 0032 3B1C     		mov	r3, r7
 240 0034 0E33     		add	r3, r3, #14
 241 0036 1B88     		ldrh	r3, [r3]
 242 0038 3A69     		ldr	r2, [r7, #16]
 243 003a D288     		ldrh	r2, [r2, #6]
 244 003c 5343     		mul	r3, r2
 245 003e 8022     		mov	r2, #128
 246 0040 1202     		lsl	r2, r2, #8
 247 0042 9B18     		add	r3, r3, r2
 248 0044 1A0C     		lsr	r2, r3, #16
 249 0046 3B1C     		mov	r3, r7
 250 0048 1633     		add	r3, r3, #22
 251 004a 1A80     		strh	r2, [r3]
 252              	.L12:
 259:../Generated_Code/PWM1.c ****   }
 260:../Generated_Code/PWM1.c ****   (void)TU1_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
 253              		.loc 1 260 0
 254 004c 3B69     		ldr	r3, [r7, #16]
 255 004e 1A68     		ldr	r2, [r3]
 256 0050 3B1C     		mov	r3, r7
 257 0052 1633     		add	r3, r3, #22
 258 0054 1B88     		ldrh	r3, [r3]
 259 0056 101C     		mov	r0, r2
 260 0058 0021     		mov	r1, #0
 261 005a 1A1C     		mov	r2, r3
 262 005c FFF7FEFF 		bl	TU1_SetOffsetTicks
 261:../Generated_Code/PWM1.c **** }
 263              		.loc 1 261 0
 264 0060 BD46     		mov	sp, r7
 265 0062 06B0     		add	sp, sp, #24
 266              		@ sp needed for prologue
 267 0064 80BD     		pop	{r7, pc}
 268              		.cfi_endproc
 269              	.LFE3:
 271 0066 C046     		.text
 272              	.Letext0:
 273              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 274              		.file 3 "../Generated_Code/PE_Types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PWM1.c
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:24     .text.PWM1_Init:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:29     .text.PWM1_Init:00000000 PWM1_Init
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:96     .text.PWM1_Init:0000004c $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:103    .text.PWM1_SetRatio16:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:108    .text.PWM1_SetRatio16:00000000 PWM1_SetRatio16
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:197    .text.SetRatio:00000000 SetRatio
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:151    .text.PWM1_SetDutyMS:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:156    .text.PWM1_SetDutyMS:00000000 PWM1_SetDutyMS
C:\Users\SAE_LP1\AppData\Local\Temp\ccibrvqf.s:193    .text.SetRatio:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.aba60cd3b17efbc2d56a1d9fc6f583a6
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.03d7426d632bb1a35ec1708754c41daf
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.2dd306b0ccbe86124098bfe3a0b58d88
                           .group:00000000 wm4.ansi_parms.h.64.05090287ebda70c0d79c02b050dca090
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.cstdint.137.268b37259d2d366c21376cbd280e10d7
                           .group:00000000 wm4.PE_Types.h.69.0f70e9553c29a787d42fe2ac9dbd945d
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.61.443ca05468cb0c6bf080e06394e39146
                           .group:00000000 wm4.MKL25Z4.h.61.adbdc31ae5ef570825ab0667cccdf447
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.TPM_PDD.h.47.938deaa7335b1be1e86f1f3ea98af3d6
                           .group:00000000 wm4.Cpu.h.64.f81ea9fa0d5dd4235933d360f41084fe
                           .group:00000000 wm4.TU1.h.131.b88ff748c6c68c5a4fb5a26e2d236fa3
                           .group:00000000 wm4.PWM1.h.115.680dc27522312ce22703fe373ae9c8c9

UNDEFINED SYMBOLS
TU1_Init
PE_LDD_DeviceDataList
TU1_GetPeriodTicks
TU1_SetOffsetTicks
