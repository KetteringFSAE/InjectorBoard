   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2017-02-22, 22:49, # CodeGen: 29
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  19:../Generated_Code/Cpu.c **** **     All Rights Reserved.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  22:../Generated_Code/Cpu.c **** **     are permitted provided that the following conditions are met:
  23:../Generated_Code/Cpu.c **** **     
  24:../Generated_Code/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  25:../Generated_Code/Cpu.c **** **       of conditions and the following disclaimer.
  26:../Generated_Code/Cpu.c **** **     
  27:../Generated_Code/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  28:../Generated_Code/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  29:../Generated_Code/Cpu.c **** **       other materials provided with the distribution.
  30:../Generated_Code/Cpu.c **** **     
  31:../Generated_Code/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  32:../Generated_Code/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  33:../Generated_Code/Cpu.c **** **       software without specific prior written permission.
  34:../Generated_Code/Cpu.c **** **     
  35:../Generated_Code/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  36:../Generated_Code/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  37:../Generated_Code/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  38:../Generated_Code/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  39:../Generated_Code/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  40:../Generated_Code/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  41:../Generated_Code/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  42:../Generated_Code/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  43:../Generated_Code/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  44:../Generated_Code/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:../Generated_Code/Cpu.c **** **     
  46:../Generated_Code/Cpu.c **** **     http: www.freescale.com
  47:../Generated_Code/Cpu.c **** **     mail: support@freescale.com
  48:../Generated_Code/Cpu.c **** ** ###################################################################*/
  49:../Generated_Code/Cpu.c **** /*!
  50:../Generated_Code/Cpu.c **** ** @file Cpu.c
  51:../Generated_Code/Cpu.c **** ** @version 01.04
  52:../Generated_Code/Cpu.c **** ** @brief
  53:../Generated_Code/Cpu.c **** **
  54:../Generated_Code/Cpu.c **** */         
  55:../Generated_Code/Cpu.c **** /*!
  56:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  57:../Generated_Code/Cpu.c **** **  @{
  58:../Generated_Code/Cpu.c **** */         
  59:../Generated_Code/Cpu.c **** 
  60:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  61:../Generated_Code/Cpu.c **** 
  62:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  63:../Generated_Code/Cpu.c **** #include "CsIO1.h"
  64:../Generated_Code/Cpu.c **** #include "IO1.h"
  65:../Generated_Code/Cpu.c **** #include "GPIO1.h"
  66:../Generated_Code/Cpu.c **** #include "PWM1.h"
  67:../Generated_Code/Cpu.c **** #include "TU1.h"
  68:../Generated_Code/Cpu.c **** #include "LEDRed.h"
  69:../Generated_Code/Cpu.c **** #include "LEDGreen.h"
  70:../Generated_Code/Cpu.c **** #include "CSBit.h"
  71:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  72:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  73:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  74:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  75:../Generated_Code/Cpu.c **** #include "Events.h"
  76:../Generated_Code/Cpu.c **** #include "Cpu.h"
  77:../Generated_Code/Cpu.c **** 
  78:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  79:../Generated_Code/Cpu.c **** extern "C" {
  80:../Generated_Code/Cpu.c **** #endif
  81:../Generated_Code/Cpu.c **** 
  82:../Generated_Code/Cpu.c **** /* Global variables */
  83:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  84:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  85:../Generated_Code/Cpu.c **** 
  86:../Generated_Code/Cpu.c **** 
  87:../Generated_Code/Cpu.c **** /*
  88:../Generated_Code/Cpu.c **** ** ===================================================================
  89:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  90:../Generated_Code/Cpu.c **** **
  91:../Generated_Code/Cpu.c **** **     Description :
  92:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  93:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  94:../Generated_Code/Cpu.c **** ** ===================================================================
  95:../Generated_Code/Cpu.c **** */
  96:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  97:../Generated_Code/Cpu.c **** {
  33              		.loc 1 97 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  98:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT00();
  43              		.loc 1 98 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT00
  99:../Generated_Code/Cpu.c **** }
  45              		.loc 1 99 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_Interrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_Interrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_Interrupt:
  59              	.LFB1:
 100:../Generated_Code/Cpu.c **** 
 101:../Generated_Code/Cpu.c **** /*
 102:../Generated_Code/Cpu.c **** ** ===================================================================
 103:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
 104:../Generated_Code/Cpu.c **** **
 105:../Generated_Code/Cpu.c **** **     Description :
 106:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 107:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 108:../Generated_Code/Cpu.c **** ** ===================================================================
 109:../Generated_Code/Cpu.c **** */
 110:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
 111:../Generated_Code/Cpu.c **** {
  60              		.loc 1 111 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
 112:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 113:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  70              		.loc 1 113 0
  71              	@ 113 "../Generated_Code/Cpu.c" 1
  72 0004 FFBE     		BKPT 255
  73              	@ 0 "" 2
 114:../Generated_Code/Cpu.c **** }
  74              		.loc 1 114 0
  75              		.code	16
  76 0006 BD46     		mov	sp, r7
  77              		@ sp needed for prologue
  78 0008 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE1:
  82 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  83              		.align	2
  84              		.global	__init_hardware
  85              		.code	16
  86              		.thumb_func
  88              	__init_hardware:
  89              	.LFB2:
 115:../Generated_Code/Cpu.c **** 
 116:../Generated_Code/Cpu.c **** 
 117:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 118:../Generated_Code/Cpu.c **** 
 119:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 120:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 121:../Generated_Code/Cpu.c **** void __init_hardware(void)
 122:../Generated_Code/Cpu.c **** {
  90              		.loc 1 122 0
  91              		.cfi_startproc
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
 123:../Generated_Code/Cpu.c **** 
 124:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 125:../Generated_Code/Cpu.c **** 
 126:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 127:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 128:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 100              		.loc 1 128 0
 101 0004 4C4A     		ldr	r2, .L10
 102 0006 4D49     		ldr	r1, .L10+4
 103 0008 4D4B     		ldr	r3, .L10+8
 104 000a D150     		str	r1, [r2, r3]
 129:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 130:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 131:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
 105              		.loc 1 131 0
 106 000c 4D4A     		ldr	r2, .L10+12
 107 000e 8823     		mov	r3, #136
 108 0010 5B01     		lsl	r3, r3, #5
 109 0012 0021     		mov	r1, #0
 110 0014 D150     		str	r1, [r2, r3]
 132:../Generated_Code/Cpu.c **** 
 133:../Generated_Code/Cpu.c ****   /* System clock initialization */
 134:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 135:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 111              		.loc 1 135 0
 112 0016 4B4A     		ldr	r2, .L10+12
 113 0018 4B4B     		ldr	r3, .L10+16
 114 001a C021     		mov	r1, #192
 115 001c 8902     		lsl	r1, r1, #10
 116 001e D150     		str	r1, [r2, r3]
 136:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
 137:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK |
 117              		.loc 1 137 0
 118 0020 484A     		ldr	r2, .L10+12
 119 0022 4849     		ldr	r1, .L10+12
 120 0024 494B     		ldr	r3, .L10+20
 121 0026 CB58     		ldr	r3, [r1, r3]
 122 0028 F021     		mov	r1, #240
 123 002a 4901     		lsl	r1, r1, #5
 124 002c 1943     		orr	r1, r3
 125 002e 474B     		ldr	r3, .L10+20
 126 0030 D150     		str	r1, [r2, r3]
 138:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTC_MASK |
 139:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 140:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 141:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 127              		.loc 1 141 0
 128 0032 474B     		ldr	r3, .L10+24
 129 0034 9B78     		ldrb	r3, [r3, #2]
 130 0036 DBB2     		uxtb	r3, r3
 131 0038 1A1C     		mov	r2, r3
 132 003a 0823     		mov	r3, #8
 133 003c 1340     		and	r3, r2
 134 003e 07D0     		beq	.L4
 142:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 143:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 135              		.loc 1 143 0
 136 0040 434B     		ldr	r3, .L10+24
 137 0042 434A     		ldr	r2, .L10+24
 138 0044 9278     		ldrb	r2, [r2, #2]
 139 0046 D2B2     		uxtb	r2, r2
 140 0048 0821     		mov	r1, #8
 141 004a 0A43     		orr	r2, r1
 142 004c D2B2     		uxtb	r2, r2
 143 004e 9A70     		strb	r2, [r3, #2]
 144              	.L4:
 144:../Generated_Code/Cpu.c ****   }
 145:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 146:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x01) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescaler
 145              		.loc 1 146 0
 146 0050 3C4A     		ldr	r2, .L10+12
 147 0052 3D4B     		ldr	r3, .L10+16
 148 0054 3F49     		ldr	r1, .L10+28
 149 0056 D150     		str	r1, [r2, r3]
 147:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 148:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 150              		.loc 1 148 0
 151 0058 3A4A     		ldr	r2, .L10+12
 152 005a 3A49     		ldr	r1, .L10+12
 153 005c 3E4B     		ldr	r3, .L10+32
 154 005e CB58     		ldr	r3, [r1, r3]
 155 0060 8021     		mov	r1, #128
 156 0062 4902     		lsl	r1, r1, #9
 157 0064 1943     		orr	r1, r3
 158 0066 3C4B     		ldr	r3, .L10+32
 159 0068 D150     		str	r1, [r2, r3]
 149:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 150:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 160              		.loc 1 150 0
 161 006a 364B     		ldr	r3, .L10+12
 162 006c 354A     		ldr	r2, .L10+12
 163 006e 1168     		ldr	r1, [r2]
 164 0070 3A4A     		ldr	r2, .L10+36
 165 0072 0A40     		and	r2, r1
 166 0074 1A60     		str	r2, [r3]
 151:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 152:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 167              		.loc 1 152 0
 168 0076 334A     		ldr	r2, .L10+12
 169 0078 3249     		ldr	r1, .L10+12
 170 007a 374B     		ldr	r3, .L10+32
 171 007c C958     		ldr	r1, [r1, r3]
 172 007e 384B     		ldr	r3, .L10+40
 173 0080 0B40     		and	r3, r1
 174 0082 8021     		mov	r1, #128
 175 0084 4904     		lsl	r1, r1, #17
 176 0086 1943     		orr	r1, r3
 177 0088 334B     		ldr	r3, .L10+32
 178 008a D150     		str	r1, [r2, r3]
 153:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 154:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 155:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 156:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 157:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 158:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 179              		.loc 1 158 0
 180 008c 354B     		ldr	r3, .L10+44
 181 008e 354A     		ldr	r2, .L10+44
 182 0090 916C     		ldr	r1, [r2, #72]
 183 0092 354A     		ldr	r2, .L10+48
 184 0094 0A40     		and	r2, r1
 185 0096 9A64     		str	r2, [r3, #72]
 159:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 160:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 186              		.loc 1 160 0
 187 0098 324B     		ldr	r3, .L10+44
 188 009a 324A     		ldr	r2, .L10+44
 189 009c D16C     		ldr	r1, [r2, #76]
 190 009e 324A     		ldr	r2, .L10+48
 191 00a0 0A40     		and	r2, r1
 192 00a2 DA64     		str	r2, [r3, #76]
 161:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 162:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 163:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);
 193              		.loc 1 163 0
 194 00a4 314B     		ldr	r3, .L10+52
 195 00a6 2422     		mov	r2, #36
 196 00a8 5A70     		strb	r2, [r3, #1]
 164:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
 165:../Generated_Code/Cpu.c ****   OSC0_CR = (OSC_CR_ERCLKEN_MASK | OSC_CR_SC2P_MASK | OSC_CR_SC16P_MASK);
 197              		.loc 1 165 0
 198 00aa 314B     		ldr	r3, .L10+56
 199 00ac 8922     		mov	r2, #137
 200 00ae 1A70     		strb	r2, [r3]
 166:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 167:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
 201              		.loc 1 167 0
 202 00b0 2E4B     		ldr	r3, .L10+52
 203 00b2 9A22     		mov	r2, #154
 204 00b4 1A70     		strb	r2, [r3]
 168:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 169:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 205              		.loc 1 169 0
 206 00b6 2D4B     		ldr	r3, .L10+52
 207 00b8 2C4A     		ldr	r2, .L10+52
 208 00ba D278     		ldrb	r2, [r2, #3]
 209 00bc D1B2     		uxtb	r1, r2
 210 00be 1F22     		mov	r2, #31
 211 00c0 0A40     		and	r2, r1
 212 00c2 D2B2     		uxtb	r2, r2
 213 00c4 DA70     		strb	r2, [r3, #3]
 170:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
 171:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x01);
 214              		.loc 1 171 0
 215 00c6 294B     		ldr	r3, .L10+52
 216 00c8 0122     		mov	r2, #1
 217 00ca 1A71     		strb	r2, [r3, #4]
 172:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 173:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 218              		.loc 1 173 0
 219 00cc 274B     		ldr	r3, .L10+52
 220 00ce 0022     		mov	r2, #0
 221 00d0 5A71     		strb	r2, [r3, #5]
 174:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 222              		.loc 1 174 0
 223 00d2 C046     		mov	r8, r8
 224              	.L5:
 225              		.loc 1 174 0 is_stmt 0 discriminator 1
 226 00d4 254B     		ldr	r3, .L10+52
 227 00d6 9B79     		ldrb	r3, [r3, #6]
 228 00d8 DBB2     		uxtb	r3, r3
 229 00da 1A1C     		mov	r2, r3
 230 00dc 1023     		mov	r3, #16
 231 00de 1340     		and	r3, r2
 232 00e0 F8D1     		bne	.L5
 175:../Generated_Code/Cpu.c ****   }
 176:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 233              		.loc 1 176 0 is_stmt 1
 234 00e2 C046     		mov	r8, r8
 235              	.L6:
 236              		.loc 1 176 0 is_stmt 0 discriminator 1
 237 00e4 214B     		ldr	r3, .L10+52
 238 00e6 9B79     		ldrb	r3, [r3, #6]
 239 00e8 DBB2     		uxtb	r3, r3
 240 00ea 1A1C     		mov	r2, r3
 241 00ec 0C23     		mov	r3, #12
 242 00ee 1340     		and	r3, r2
 243 00f0 082B     		cmp	r3, #8
 244 00f2 F7D1     		bne	.L6
 177:../Generated_Code/Cpu.c ****   }
 178:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 179:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 180:../Generated_Code/Cpu.c ****   MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
 245              		.loc 1 180 0 is_stmt 1
 246 00f4 1D4B     		ldr	r3, .L10+52
 247 00f6 4022     		mov	r2, #64
 248 00f8 5A71     		strb	r2, [r3, #5]
 181:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 249              		.loc 1 181 0
 250 00fa C046     		mov	r8, r8
 251              	.L7:
 252              		.loc 1 181 0 is_stmt 0 discriminator 1
 253 00fc 1B4B     		ldr	r3, .L10+52
 254 00fe 9B79     		ldrb	r3, [r3, #6]
 255 0100 DBB2     		uxtb	r3, r3
 256 0102 1A1C     		mov	r2, r3
 257 0104 0C23     		mov	r3, #12
 258 0106 1340     		and	r3, r2
 259 0108 082B     		cmp	r3, #8
 260 010a F7D1     		bne	.L7
 182:../Generated_Code/Cpu.c ****   }
 183:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 261              		.loc 1 183 0 is_stmt 1
 262 010c C046     		mov	r8, r8
 263              	.L8:
 264              		.loc 1 183 0 is_stmt 0 discriminator 1
 265 010e 174B     		ldr	r3, .L10+52
 266 0110 9B79     		ldrb	r3, [r3, #6]
 267 0112 DBB2     		uxtb	r3, r3
 268 0114 1A1C     		mov	r2, r3
 269 0116 4023     		mov	r3, #64
 270 0118 1340     		and	r3, r2
 271 011a F8D0     		beq	.L8
 184:../Generated_Code/Cpu.c ****   }
 185:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 186:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 187:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
 272              		.loc 1 187 0 is_stmt 1
 273 011c 134B     		ldr	r3, .L10+52
 274 011e 1A22     		mov	r2, #26
 275 0120 1A70     		strb	r2, [r3]
 188:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 276              		.loc 1 188 0
 277 0122 C046     		mov	r8, r8
 278              	.L9:
 279              		.loc 1 188 0 is_stmt 0 discriminator 1
 280 0124 114B     		ldr	r3, .L10+52
 281 0126 9B79     		ldrb	r3, [r3, #6]
 282 0128 DBB2     		uxtb	r3, r3
 283 012a 1A1C     		mov	r2, r3
 284 012c 0C23     		mov	r3, #12
 285 012e 1340     		and	r3, r2
 286 0130 0C2B     		cmp	r3, #12
 287 0132 F7D1     		bne	.L9
 189:../Generated_Code/Cpu.c ****   }
 190:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 191:../Generated_Code/Cpu.c **** 
 192:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 193:../Generated_Code/Cpu.c **** 
 194:../Generated_Code/Cpu.c **** }
 288              		.loc 1 194 0 is_stmt 1
 289 0134 BD46     		mov	sp, r7
 290              		@ sp needed for prologue
 291 0136 80BD     		pop	{r7, pc}
 292              	.L11:
 293              		.align	2
 294              	.L10:
 295 0138 00E000E0 		.word	-536813568
 296 013c 00000000 		.word	__vect_table
 297 0140 080D0000 		.word	3336
 298 0144 00700440 		.word	1074032640
 299 0148 44100000 		.word	4164
 300 014c 38100000 		.word	4152
 301 0150 00D00740 		.word	1074253824
 302 0154 00000110 		.word	268500992
 303 0158 04100000 		.word	4100
 304 015c FFFFF3FF 		.word	-786433
 305 0160 FFFFFFFC 		.word	-50331649
 306 0164 00900440 		.word	1074040832
 307 0168 FFF8FFFE 		.word	-16779009
 308 016c 00400640 		.word	1074151424
 309 0170 00500640 		.word	1074155520
 310              		.cfi_endproc
 311              	.LFE2:
 313              		.section	.text.PE_low_level_init,"ax",%progbits
 314              		.align	2
 315              		.global	PE_low_level_init
 316              		.code	16
 317              		.thumb_func
 319              	PE_low_level_init:
 320              	.LFB3:
 195:../Generated_Code/Cpu.c **** 
 196:../Generated_Code/Cpu.c **** 
 197:../Generated_Code/Cpu.c **** 
 198:../Generated_Code/Cpu.c **** /*
 199:../Generated_Code/Cpu.c **** ** ===================================================================
 200:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 201:../Generated_Code/Cpu.c **** **
 202:../Generated_Code/Cpu.c **** **     Description :
 203:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 204:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 205:../Generated_Code/Cpu.c **** **         application initialization code.
 206:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 207:../Generated_Code/Cpu.c **** ** ===================================================================
 208:../Generated_Code/Cpu.c **** */
 209:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 210:../Generated_Code/Cpu.c **** {
 321              		.loc 1 210 0
 322              		.cfi_startproc
 323 0000 80B5     		push	{r7, lr}
 324              	.LCFI6:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 00AF     		add	r7, sp, #0
 329              	.LCFI7:
 330              		.cfi_def_cfa_register 7
 211:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 212:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 213:../Generated_Code/Cpu.c ****   #endif
 214:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 215:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 216:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 331              		.loc 1 216 0
 332 0004 324B     		ldr	r3, .L13
 333 0006 324A     		ldr	r2, .L13
 334 0008 1169     		ldr	r1, [r2, #16]
 335 000a 324A     		ldr	r2, .L13+4
 336 000c 0A40     		and	r2, r1
 337 000e E021     		mov	r1, #224
 338 0010 C900     		lsl	r1, r1, #3
 339 0012 0A43     		orr	r2, r1
 340 0014 1A61     		str	r2, [r3, #16]
 217:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 218:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 219:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 220:../Generated_Code/Cpu.c ****                ));
 221:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 222:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 223:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 341              		.loc 1 223 0
 342 0016 304B     		ldr	r3, .L13+8
 343 0018 2F4A     		ldr	r2, .L13+8
 344 001a 5279     		ldrb	r2, [r2, #5]
 345 001c D2B2     		uxtb	r2, r2
 346 001e 1F21     		mov	r1, #31
 347 0020 8A43     		bic	r2, r1
 348 0022 D2B2     		uxtb	r2, r2
 349 0024 5A71     		strb	r2, [r3, #5]
 224:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 225:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 350              		.loc 1 225 0
 351 0026 2C4B     		ldr	r3, .L13+8
 352 0028 2B4A     		ldr	r2, .L13+8
 353 002a 1279     		ldrb	r2, [r2, #4]
 354 002c D2B2     		uxtb	r2, r2
 355 002e 0721     		mov	r1, #7
 356 0030 8A43     		bic	r2, r1
 357 0032 D2B2     		uxtb	r2, r2
 358 0034 1A71     		strb	r2, [r3, #4]
 226:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 227:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 228:../Generated_Code/Cpu.c ****               );
 229:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 230:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 231:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 359              		.loc 1 231 0
 360 0036 294B     		ldr	r3, .L13+12
 361 0038 284A     		ldr	r2, .L13+12
 362 003a 1278     		ldrb	r2, [r2]
 363 003c D2B2     		uxtb	r2, r2
 364 003e D2B2     		uxtb	r2, r2
 365 0040 7321     		mov	r1, #115
 366 0042 8A43     		bic	r2, r1
 367 0044 D2B2     		uxtb	r2, r2
 368 0046 5021     		mov	r1, #80
 369 0048 0A43     		orr	r2, r1
 370 004a D2B2     		uxtb	r2, r2
 371 004c D2B2     		uxtb	r2, r2
 372 004e 1A70     		strb	r2, [r3]
 232:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 233:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 234:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 235:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 236:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 237:../Generated_Code/Cpu.c ****                ));
 238:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 239:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 373              		.loc 1 239 0
 374 0050 224B     		ldr	r3, .L13+12
 375 0052 224A     		ldr	r2, .L13+12
 376 0054 5278     		ldrb	r2, [r2, #1]
 377 0056 D2B2     		uxtb	r2, r2
 378 0058 D2B2     		uxtb	r2, r2
 379 005a 6321     		mov	r1, #99
 380 005c 8A43     		bic	r2, r1
 381 005e D2B2     		uxtb	r2, r2
 382 0060 4021     		mov	r1, #64
 383 0062 0A43     		orr	r2, r1
 384 0064 D2B2     		uxtb	r2, r2
 385 0066 D2B2     		uxtb	r2, r2
 386 0068 5A70     		strb	r2, [r3, #1]
 240:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 241:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 242:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 243:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 244:../Generated_Code/Cpu.c ****                ));
 245:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 246:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 387              		.loc 1 246 0
 388 006a 1C4B     		ldr	r3, .L13+12
 389 006c 1B4A     		ldr	r2, .L13+12
 390 006e 9278     		ldrb	r2, [r2, #2]
 391 0070 D2B2     		uxtb	r2, r2
 392 0072 1921     		mov	r1, #25
 393 0074 8A43     		bic	r2, r1
 394 0076 D2B2     		uxtb	r2, r2
 395 0078 9A70     		strb	r2, [r3, #2]
 247:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 248:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 249:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 250:../Generated_Code/Cpu.c ****                );
 251:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 252:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 396              		.loc 1 252 0
 397 007a 194B     		ldr	r3, .L13+16
 398 007c 0022     		mov	r2, #0
 399 007e 1A70     		strb	r2, [r3]
 253:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 254:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 255:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 400              		.loc 1 255 0
 401 0080 134B     		ldr	r3, .L13
 402 0082 134A     		ldr	r2, .L13
 403 0084 116D     		ldr	r1, [r2, #80]
 404 0086 134A     		ldr	r2, .L13+4
 405 0088 0A40     		and	r2, r1
 406 008a E021     		mov	r1, #224
 407 008c C900     		lsl	r1, r1, #3
 408 008e 0A43     		orr	r2, r1
 409 0090 1A65     		str	r2, [r3, #80]
 256:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 257:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 258:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 259:../Generated_Code/Cpu.c ****                 ));
 260:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 261:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 410              		.loc 1 261 0
 411 0092 144A     		ldr	r2, .L13+20
 412 0094 1349     		ldr	r1, .L13+20
 413 0096 C123     		mov	r3, #193
 414 0098 9B00     		lsl	r3, r3, #2
 415 009a C958     		ldr	r1, [r1, r3]
 416 009c 124B     		ldr	r3, .L13+24
 417 009e 1940     		and	r1, r3
 418 00a0 C123     		mov	r3, #193
 419 00a2 9B00     		lsl	r3, r3, #2
 420 00a4 D150     		str	r1, [r2, r3]
 262:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 263:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 421              		.loc 1 263 0
 422 00a6 0020     		mov	r0, #0
 423 00a8 FFF7FEFF 		bl	IO1_Init
 264:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "GPIO1" component auto initialization. Auto initialization feature can be disable
 265:../Generated_Code/Cpu.c ****   (void)GPIO1_Init(NULL);
 424              		.loc 1 265 0
 425 00ac 0020     		mov	r0, #0
 426 00ae FFF7FEFF 		bl	GPIO1_Init
 266:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PWM1" component auto initialization. Auto initialization feature can be disabled 
 267:../Generated_Code/Cpu.c ****   (void)PWM1_Init(NULL);
 427              		.loc 1 267 0
 428 00b2 0020     		mov	r0, #0
 429 00b4 FFF7FEFF 		bl	PWM1_Init
 268:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "LEDRed" component auto initialization. Auto initialization feature can be disab
 269:../Generated_Code/Cpu.c ****   (void)LEDRed_Init(NULL);
 430              		.loc 1 269 0
 431 00b8 0020     		mov	r0, #0
 432 00ba FFF7FEFF 		bl	LEDRed_Init
 270:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "LEDGreen" component auto initialization. Auto initialization feature can be dis
 271:../Generated_Code/Cpu.c ****   (void)LEDGreen_Init(NULL);
 433              		.loc 1 271 0
 434 00be 0020     		mov	r0, #0
 435 00c0 FFF7FEFF 		bl	LEDGreen_Init
 272:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "CSBit" component auto initialization. Auto initialization feature can be disabl
 273:../Generated_Code/Cpu.c ****   (void)CSBit_Init(NULL);
 436              		.loc 1 273 0
 437 00c4 0020     		mov	r0, #0
 438 00c6 FFF7FEFF 		bl	CSBit_Init
 274:../Generated_Code/Cpu.c ****   __EI();
 439              		.loc 1 274 0
 440              	@ 274 "../Generated_Code/Cpu.c" 1
 441 00ca 62B6     		CPSIE i
 442              	@ 0 "" 2
 275:../Generated_Code/Cpu.c **** }
 443              		.loc 1 275 0
 444              		.code	16
 445 00cc BD46     		mov	sp, r7
 446              		@ sp needed for prologue
 447 00ce 80BD     		pop	{r7, pc}
 448              	.L14:
 449              		.align	2
 450              	.L13:
 451 00d0 00900440 		.word	1074040832
 452 00d4 FFF8FFFE 		.word	-16779009
 453 00d8 00F00740 		.word	1074262016
 454 00dc 00D00740 		.word	1074253824
 455 00e0 00E00740 		.word	1074257920
 456 00e4 00E100E0 		.word	-536813312
 457 00e8 FFFF00FF 		.word	-16711681
 458              		.cfi_endproc
 459              	.LFE3:
 461              		.text
 462              	.Letext0:
 463              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 464              		.file 3 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 465              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:23     .bss.SR_lock:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:53     .text.Cpu_Interrupt:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:58     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:83     .text.__init_hardware:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:88     .text.__init_hardware:00000000 __init_hardware
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:295    .text.__init_hardware:00000138 $d
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:314    .text.PE_low_level_init:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:319    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\SAE_LP1\AppData\Local\Temp\cccn5HlM.s:451    .text.PE_low_level_init:000000d0 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.aba60cd3b17efbc2d56a1d9fc6f583a6
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.03d7426d632bb1a35ec1708754c41daf
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.2dd306b0ccbe86124098bfe3a0b58d88
                           .group:00000000 wm4.ansi_parms.h.64.05090287ebda70c0d79c02b050dca090
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.va_list.h.9.b0bb078841c0305c2667a31da10a9070
                           .group:00000000 wm4.file_struc.h.13.79700b909bfbc91e5b3cffa0100f62cf
                           .group:00000000 wm4.stdarg.ARM.h.9.32516e68edcca81ab31f48f233894821
                           .group:00000000 wm4.stdio_api.h.71.3b2f2f9a22fa2b89114b19a43e47537d
                           .group:00000000 wm4.cstdio.1186.6c7f5c80aaa542dbe41dde866b3043d9
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.cstdint.137.268b37259d2d366c21376cbd280e10d7
                           .group:00000000 wm4.PE_Types.h.69.84cbd2e47ffcf8df2f96f34cfe757451
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.61.443ca05468cb0c6bf080e06394e39146
                           .group:00000000 wm4.MKL25Z4.h.61.adbdc31ae5ef570825ab0667cccdf447
                           .group:00000000 wm4.Cpu.h.78.e1dd9945a5e7ab9c31a38ba183a322df
                           .group:00000000 wm4.IO1.h.123.12a3ddb175f8510413e272cf486b6f13
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.GPIO_PDD.h.122.b35a34a6eaffa5c552aafe5692260473
                           .group:00000000 wm4.PORT_PDD.h.9.e24435d4c3cbcc67beceb9e359966485
                           .group:00000000 wm4.GPIO1.h.124.b7ee380ef904b55819a5c75398eefb42
                           .group:00000000 wm4.TPM_PDD.h.9.31a1556de00afefbac847df3173403c0
                           .group:00000000 wm4.TU1.h.131.b88ff748c6c68c5a4fb5a26e2d236fa3
                           .group:00000000 wm4.PWM1.h.115.680dc27522312ce22703fe373ae9c8c9
                           .group:00000000 wm4.LEDRed.h.81.c201eeb213f541d934eae6e245311c3d
                           .group:00000000 wm4.LEDGreen.h.82.6bfe1b791f43b4324e0dea73e093527e
                           .group:00000000 wm4.CSBit.h.82.ff7132ae69077fd0e7e8f415499ed4b0

UNDEFINED SYMBOLS
Cpu_OnNMIINT00
__vect_table
IO1_Init
GPIO1_Init
PWM1_Init
LEDRed_Init
LEDGreen_Init
CSBit_Init
