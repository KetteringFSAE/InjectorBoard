   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CSBit.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	4
  23              		.section	.text.CSBit_Init,"ax",%progbits
  24              		.align	2
  25              		.global	CSBit_Init
  26              		.code	16
  27              		.thumb_func
  29              	CSBit_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/CSBit.c"
   1:../Generated_Code/CSBit.c **** /* ###################################################################
   2:../Generated_Code/CSBit.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/CSBit.c **** **     Filename    : CSBit.c
   4:../Generated_Code/CSBit.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/CSBit.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/CSBit.c **** **     Component   : BitIO_LDD
   7:../Generated_Code/CSBit.c **** **     Version     : Component 01.033, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/CSBit.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/CSBit.c **** **     Date/Time   : 2017-02-22, 22:49, # CodeGen: 29
  10:../Generated_Code/CSBit.c **** **     Abstract    :
  11:../Generated_Code/CSBit.c **** **         The HAL BitIO component provides a low level API for unified
  12:../Generated_Code/CSBit.c **** **         access to general purpose digital input/output pins across
  13:../Generated_Code/CSBit.c **** **         various device designs.
  14:../Generated_Code/CSBit.c **** **
  15:../Generated_Code/CSBit.c **** **         RTOS drivers using HAL BitIO API are simpler and more
  16:../Generated_Code/CSBit.c **** **         portable to various microprocessors.
  17:../Generated_Code/CSBit.c **** **     Settings    :
  18:../Generated_Code/CSBit.c **** **          Component name                                 : CSBit
  19:../Generated_Code/CSBit.c **** **          Pin for I/O                                    : PTD0/SPI0_PCS0/TPM0_CH0
  20:../Generated_Code/CSBit.c **** **          Pin signal                                     : 
  21:../Generated_Code/CSBit.c **** **          Direction                                      : Output
  22:../Generated_Code/CSBit.c **** **          Initialization                                 : 
  23:../Generated_Code/CSBit.c **** **            Init. direction                              : Output
  24:../Generated_Code/CSBit.c **** **            Init. value                                  : 1
  25:../Generated_Code/CSBit.c **** **            Auto initialization                          : yes
  26:../Generated_Code/CSBit.c **** **          Safe mode                                      : no
  27:../Generated_Code/CSBit.c **** **     Contents    :
  28:../Generated_Code/CSBit.c **** **         Init   - LDD_TDeviceData* CSBit_Init(LDD_TUserData *UserDataPtr);
  29:../Generated_Code/CSBit.c **** **         GetVal - bool CSBit_GetVal(LDD_TDeviceData *DeviceDataPtr);
  30:../Generated_Code/CSBit.c **** **         PutVal - void CSBit_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val);
  31:../Generated_Code/CSBit.c **** **         ClrVal - void CSBit_ClrVal(LDD_TDeviceData *DeviceDataPtr);
  32:../Generated_Code/CSBit.c **** **         SetVal - void CSBit_SetVal(LDD_TDeviceData *DeviceDataPtr);
  33:../Generated_Code/CSBit.c **** **
  34:../Generated_Code/CSBit.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  35:../Generated_Code/CSBit.c **** **     All Rights Reserved.
  36:../Generated_Code/CSBit.c **** **     
  37:../Generated_Code/CSBit.c **** **     Redistribution and use in source and binary forms, with or without modification,
  38:../Generated_Code/CSBit.c **** **     are permitted provided that the following conditions are met:
  39:../Generated_Code/CSBit.c **** **     
  40:../Generated_Code/CSBit.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  41:../Generated_Code/CSBit.c **** **       of conditions and the following disclaimer.
  42:../Generated_Code/CSBit.c **** **     
  43:../Generated_Code/CSBit.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  44:../Generated_Code/CSBit.c **** **       list of conditions and the following disclaimer in the documentation and/or
  45:../Generated_Code/CSBit.c **** **       other materials provided with the distribution.
  46:../Generated_Code/CSBit.c **** **     
  47:../Generated_Code/CSBit.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  48:../Generated_Code/CSBit.c **** **       contributors may be used to endorse or promote products derived from this
  49:../Generated_Code/CSBit.c **** **       software without specific prior written permission.
  50:../Generated_Code/CSBit.c **** **     
  51:../Generated_Code/CSBit.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  52:../Generated_Code/CSBit.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  53:../Generated_Code/CSBit.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  54:../Generated_Code/CSBit.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  55:../Generated_Code/CSBit.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  56:../Generated_Code/CSBit.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  57:../Generated_Code/CSBit.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  58:../Generated_Code/CSBit.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  59:../Generated_Code/CSBit.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  60:../Generated_Code/CSBit.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  61:../Generated_Code/CSBit.c **** **     
  62:../Generated_Code/CSBit.c **** **     http: www.freescale.com
  63:../Generated_Code/CSBit.c **** **     mail: support@freescale.com
  64:../Generated_Code/CSBit.c **** ** ###################################################################*/
  65:../Generated_Code/CSBit.c **** /*!
  66:../Generated_Code/CSBit.c **** ** @file CSBit.c
  67:../Generated_Code/CSBit.c **** ** @version 01.03
  68:../Generated_Code/CSBit.c **** ** @brief
  69:../Generated_Code/CSBit.c **** **         The HAL BitIO component provides a low level API for unified
  70:../Generated_Code/CSBit.c **** **         access to general purpose digital input/output pins across
  71:../Generated_Code/CSBit.c **** **         various device designs.
  72:../Generated_Code/CSBit.c **** **
  73:../Generated_Code/CSBit.c **** **         RTOS drivers using HAL BitIO API are simpler and more
  74:../Generated_Code/CSBit.c **** **         portable to various microprocessors.
  75:../Generated_Code/CSBit.c **** */         
  76:../Generated_Code/CSBit.c **** /*!
  77:../Generated_Code/CSBit.c **** **  @addtogroup CSBit_module CSBit module documentation
  78:../Generated_Code/CSBit.c **** **  @{
  79:../Generated_Code/CSBit.c **** */         
  80:../Generated_Code/CSBit.c **** 
  81:../Generated_Code/CSBit.c **** /* MODULE CSBit. */
  82:../Generated_Code/CSBit.c **** 
  83:../Generated_Code/CSBit.c **** /* {Default RTOS Adapter} No RTOS includes */
  84:../Generated_Code/CSBit.c **** #include "CSBit.h"
  85:../Generated_Code/CSBit.c **** 
  86:../Generated_Code/CSBit.c **** #ifdef __cplusplus
  87:../Generated_Code/CSBit.c **** extern "C" {
  88:../Generated_Code/CSBit.c **** #endif 
  89:../Generated_Code/CSBit.c **** 
  90:../Generated_Code/CSBit.c **** typedef struct {
  91:../Generated_Code/CSBit.c ****   LDD_TUserData *UserDataPtr;          /* Pointer to user data */
  92:../Generated_Code/CSBit.c **** } CSBit_TDeviceData;                   /* Device data structure type */
  93:../Generated_Code/CSBit.c **** 
  94:../Generated_Code/CSBit.c **** typedef CSBit_TDeviceData *CSBit_TDeviceDataPtr ; /* Pointer to the device data structure. */
  95:../Generated_Code/CSBit.c **** 
  96:../Generated_Code/CSBit.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  97:../Generated_Code/CSBit.c **** static CSBit_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  98:../Generated_Code/CSBit.c **** /*
  99:../Generated_Code/CSBit.c **** ** ===================================================================
 100:../Generated_Code/CSBit.c **** **     Method      :  CSBit_Init (component BitIO_LDD)
 101:../Generated_Code/CSBit.c **** */
 102:../Generated_Code/CSBit.c **** /*!
 103:../Generated_Code/CSBit.c **** **     @brief
 104:../Generated_Code/CSBit.c **** **         Initializes the device. Allocates memory for the device data
 105:../Generated_Code/CSBit.c **** **         structure, allocates interrupt vectors and sets interrupt
 106:../Generated_Code/CSBit.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 107:../Generated_Code/CSBit.c **** **         in init. code" is set to "yes" value then the device is also
 108:../Generated_Code/CSBit.c **** **         enabled(see the description of the Enable() method). In this
 109:../Generated_Code/CSBit.c **** **         case the Enable() method is not necessary and needn't to be
 110:../Generated_Code/CSBit.c **** **         generated. 
 111:../Generated_Code/CSBit.c **** **     @param
 112:../Generated_Code/CSBit.c **** **         UserDataPtr     - Pointer to the user or
 113:../Generated_Code/CSBit.c **** **                           RTOS specific data. This pointer will be
 114:../Generated_Code/CSBit.c **** **                           passed as an event or callback parameter.
 115:../Generated_Code/CSBit.c **** **     @return
 116:../Generated_Code/CSBit.c **** **                         - Pointer to the dynamically allocated private
 117:../Generated_Code/CSBit.c **** **                           structure or NULL if there was an error.
 118:../Generated_Code/CSBit.c **** */
 119:../Generated_Code/CSBit.c **** /* ===================================================================*/
 120:../Generated_Code/CSBit.c **** LDD_TDeviceData* CSBit_Init(LDD_TUserData *UserDataPtr)
 121:../Generated_Code/CSBit.c **** {
  32              		.loc 1 121 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 122:../Generated_Code/CSBit.c ****   /* Allocate device structure */
 123:../Generated_Code/CSBit.c ****   CSBit_TDeviceDataPtr DeviceDataPrv;
 124:../Generated_Code/CSBit.c **** 
 125:../Generated_Code/CSBit.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 126:../Generated_Code/CSBit.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 126 0
  47 0008 104B     		ldr	r3, .L3
  48 000a FB60     		str	r3, [r7, #12]
 127:../Generated_Code/CSBit.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  49              		.loc 1 127 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 7A68     		ldr	r2, [r7, #4]
  52 0010 1A60     		str	r2, [r3]
 128:../Generated_Code/CSBit.c ****   /* Configure pin as output */
 129:../Generated_Code/CSBit.c ****   /* GPIOD_PDDR: PDD|=1 */
 130:../Generated_Code/CSBit.c ****   GPIOD_PDDR |= GPIO_PDDR_PDD(0x01);
  53              		.loc 1 130 0
  54 0012 0F4B     		ldr	r3, .L3+4
  55 0014 0E4A     		ldr	r2, .L3+4
  56 0016 5269     		ldr	r2, [r2, #20]
  57 0018 0121     		mov	r1, #1
  58 001a 0A43     		orr	r2, r1
  59 001c 5A61     		str	r2, [r3, #20]
 131:../Generated_Code/CSBit.c ****   /* Set initialization value */
 132:../Generated_Code/CSBit.c ****   /* GPIOD_PDOR: PDO|=1 */
 133:../Generated_Code/CSBit.c ****   GPIOD_PDOR |= GPIO_PDOR_PDO(0x01);
  60              		.loc 1 133 0
  61 001e 0C4B     		ldr	r3, .L3+4
  62 0020 0B4A     		ldr	r2, .L3+4
  63 0022 1268     		ldr	r2, [r2]
  64 0024 0121     		mov	r1, #1
  65 0026 0A43     		orr	r2, r1
  66 0028 1A60     		str	r2, [r3]
 134:../Generated_Code/CSBit.c ****   /* Initialization of Port Control register */
 135:../Generated_Code/CSBit.c ****   /* PORTD_PCR0: ISF=0,MUX=1 */
 136:../Generated_Code/CSBit.c ****   PORTD_PCR0 = (uint32_t)((PORTD_PCR0 & (uint32_t)~(uint32_t)(
  67              		.loc 1 136 0
  68 002a 0A4B     		ldr	r3, .L3+8
  69 002c 094A     		ldr	r2, .L3+8
  70 002e 1168     		ldr	r1, [r2]
  71 0030 094A     		ldr	r2, .L3+12
  72 0032 0A40     		and	r2, r1
  73 0034 8021     		mov	r1, #128
  74 0036 4900     		lsl	r1, r1, #1
  75 0038 0A43     		orr	r2, r1
  76 003a 1A60     		str	r2, [r3]
 137:../Generated_Code/CSBit.c ****                 PORT_PCR_ISF_MASK |
 138:../Generated_Code/CSBit.c ****                 PORT_PCR_MUX(0x06)
 139:../Generated_Code/CSBit.c ****                )) | (uint32_t)(
 140:../Generated_Code/CSBit.c ****                 PORT_PCR_MUX(0x01)
 141:../Generated_Code/CSBit.c ****                ));
 142:../Generated_Code/CSBit.c ****   /* Registration of the device structure */
 143:../Generated_Code/CSBit.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_CSBit_ID,DeviceDataPrv);
  77              		.loc 1 143 0
  78 003c 074B     		ldr	r3, .L3+16
  79 003e FA68     		ldr	r2, [r7, #12]
  80 0040 9A61     		str	r2, [r3, #24]
 144:../Generated_Code/CSBit.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
  81              		.loc 1 144 0
  82 0042 FB68     		ldr	r3, [r7, #12]
 145:../Generated_Code/CSBit.c **** }
  83              		.loc 1 145 0
  84 0044 181C     		mov	r0, r3
  85 0046 BD46     		mov	sp, r7
  86 0048 04B0     		add	sp, sp, #16
  87              		@ sp needed for prologue
  88 004a 80BD     		pop	{r7, pc}
  89              	.L4:
  90              		.align	2
  91              	.L3:
  92 004c 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  93 0050 C0F00F40 		.word	1074786496
  94 0054 00C00440 		.word	1074053120
  95 0058 FFF8FFFE 		.word	-16779009
  96 005c 00000000 		.word	PE_LDD_DeviceDataList
  97              		.cfi_endproc
  98              	.LFE0:
 100              		.section	.text.CSBit_GetVal,"ax",%progbits
 101              		.align	2
 102              		.global	CSBit_GetVal
 103              		.code	16
 104              		.thumb_func
 106              	CSBit_GetVal:
 107              	.LFB1:
 146:../Generated_Code/CSBit.c **** /*
 147:../Generated_Code/CSBit.c **** ** ===================================================================
 148:../Generated_Code/CSBit.c **** **     Method      :  CSBit_GetVal (component BitIO_LDD)
 149:../Generated_Code/CSBit.c **** */
 150:../Generated_Code/CSBit.c **** /*!
 151:../Generated_Code/CSBit.c **** **     @brief
 152:../Generated_Code/CSBit.c **** **         Returns the input/output value. If the direction is [input]
 153:../Generated_Code/CSBit.c **** **         then the input value of the pin is read and returned. If the
 154:../Generated_Code/CSBit.c **** **         direction is [output] then the last written value is read
 155:../Generated_Code/CSBit.c **** **         and returned (see <Safe mode> property for limitations).
 156:../Generated_Code/CSBit.c **** **         This method cannot be disabled if direction is [input].
 157:../Generated_Code/CSBit.c **** **     @param
 158:../Generated_Code/CSBit.c **** **         DeviceDataPtr   - Device data structure
 159:../Generated_Code/CSBit.c **** **                           pointer returned by <Init> method.
 160:../Generated_Code/CSBit.c **** **     @return
 161:../Generated_Code/CSBit.c **** **                         - Input or output value. Possible values:
 162:../Generated_Code/CSBit.c **** **                           <false> - logical "0" (Low level)
 163:../Generated_Code/CSBit.c **** **                           <true> - logical "1" (High level)
 164:../Generated_Code/CSBit.c **** */
 165:../Generated_Code/CSBit.c **** /* ===================================================================*/
 166:../Generated_Code/CSBit.c **** bool CSBit_GetVal(LDD_TDeviceData *DeviceDataPtr)
 167:../Generated_Code/CSBit.c **** {
 108              		.loc 1 167 0
 109              		.cfi_startproc
 110 0000 80B5     		push	{r7, lr}
 111              	.LCFI3:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 84B0     		sub	sp, sp, #16
 116              	.LCFI4:
 117              		.cfi_def_cfa_offset 24
 118 0004 00AF     		add	r7, sp, #0
 119              	.LCFI5:
 120              		.cfi_def_cfa_register 7
 121 0006 7860     		str	r0, [r7, #4]
 168:../Generated_Code/CSBit.c ****   uint32_t PortData;                   /* Port data masked according to the bit used */
 169:../Generated_Code/CSBit.c **** 
 170:../Generated_Code/CSBit.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 171:../Generated_Code/CSBit.c ****   PortData = GPIO_PDD_GetPortDataOutput(CSBit_MODULE_BASE_ADDRESS) & CSBit_PORT_MASK;
 122              		.loc 1 171 0
 123 0008 064B     		ldr	r3, .L7
 124 000a 1A68     		ldr	r2, [r3]
 125 000c 0123     		mov	r3, #1
 126 000e 1340     		and	r3, r2
 127 0010 FB60     		str	r3, [r7, #12]
 172:../Generated_Code/CSBit.c ****   return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
 128              		.loc 1 172 0
 129 0012 FB68     		ldr	r3, [r7, #12]
 130 0014 5A1E     		sub	r2, r3, #1
 131 0016 9341     		sbc	r3, r3, r2
 132 0018 DBB2     		uxtb	r3, r3
 173:../Generated_Code/CSBit.c **** }
 133              		.loc 1 173 0
 134 001a 181C     		mov	r0, r3
 135 001c BD46     		mov	sp, r7
 136 001e 04B0     		add	sp, sp, #16
 137              		@ sp needed for prologue
 138 0020 80BD     		pop	{r7, pc}
 139              	.L8:
 140 0022 C046     		.align	2
 141              	.L7:
 142 0024 C0F00FF8 		.word	-133173056
 143              		.cfi_endproc
 144              	.LFE1:
 146              		.section	.text.CSBit_PutVal,"ax",%progbits
 147              		.align	2
 148              		.global	CSBit_PutVal
 149              		.code	16
 150              		.thumb_func
 152              	CSBit_PutVal:
 153              	.LFB2:
 174:../Generated_Code/CSBit.c **** 
 175:../Generated_Code/CSBit.c **** /*
 176:../Generated_Code/CSBit.c **** ** ===================================================================
 177:../Generated_Code/CSBit.c **** **     Method      :  CSBit_PutVal (component BitIO_LDD)
 178:../Generated_Code/CSBit.c **** */
 179:../Generated_Code/CSBit.c **** /*!
 180:../Generated_Code/CSBit.c **** **     @brief
 181:../Generated_Code/CSBit.c **** **         The specified output value is set. If the direction is <b>
 182:../Generated_Code/CSBit.c **** **         input</b>, the component saves the value to a memory or a
 183:../Generated_Code/CSBit.c **** **         register and this value will be written to the pin after
 184:../Generated_Code/CSBit.c **** **         switching to the output mode (using <tt>SetDir(TRUE)</tt>;
 185:../Generated_Code/CSBit.c **** **         see <a href="BitIOProperties.html#SafeMode">Safe mode</a>
 186:../Generated_Code/CSBit.c **** **         property for limitations). If the direction is <b>output</b>,
 187:../Generated_Code/CSBit.c **** **         it writes the value to the pin. (Method is available only if
 188:../Generated_Code/CSBit.c **** **         the direction = <u><tt>output</tt></u> or <u><tt>
 189:../Generated_Code/CSBit.c **** **         input/output</tt></u>).
 190:../Generated_Code/CSBit.c **** **     @param
 191:../Generated_Code/CSBit.c **** **         DeviceDataPtr   - Device data structure
 192:../Generated_Code/CSBit.c **** **                           pointer returned by <Init> method.
 193:../Generated_Code/CSBit.c **** **     @param
 194:../Generated_Code/CSBit.c **** **         Val             - Output value. Possible values:
 195:../Generated_Code/CSBit.c **** **                           <false> - logical "0" (Low level)
 196:../Generated_Code/CSBit.c **** **                           <true> - logical "1" (High level)
 197:../Generated_Code/CSBit.c **** */
 198:../Generated_Code/CSBit.c **** /* ===================================================================*/
 199:../Generated_Code/CSBit.c **** void CSBit_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val)
 200:../Generated_Code/CSBit.c **** {
 154              		.loc 1 200 0
 155              		.cfi_startproc
 156 0000 80B5     		push	{r7, lr}
 157              	.LCFI6:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 0002 82B0     		sub	sp, sp, #8
 162              	.LCFI7:
 163              		.cfi_def_cfa_offset 16
 164 0004 00AF     		add	r7, sp, #0
 165              	.LCFI8:
 166              		.cfi_def_cfa_register 7
 167 0006 7860     		str	r0, [r7, #4]
 168 0008 0A1C     		mov	r2, r1
 169 000a FB1C     		add	r3, r7, #3
 170 000c 1A70     		strb	r2, [r3]
 201:../Generated_Code/CSBit.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 202:../Generated_Code/CSBit.c ****   if (Val) {
 171              		.loc 1 202 0
 172 000e FB1C     		add	r3, r7, #3
 173 0010 1B78     		ldrb	r3, [r3]
 174 0012 002B     		cmp	r3, #0
 175 0014 03D0     		beq	.L10
 203:../Generated_Code/CSBit.c ****     GPIO_PDD_SetPortDataOutputMask(CSBit_MODULE_BASE_ADDRESS, CSBit_PORT_MASK);
 176              		.loc 1 203 0
 177 0016 054B     		ldr	r3, .L12
 178 0018 0122     		mov	r2, #1
 179 001a 5A60     		str	r2, [r3, #4]
 180 001c 02E0     		b	.L9
 181              	.L10:
 204:../Generated_Code/CSBit.c ****   } else { /* !Val */
 205:../Generated_Code/CSBit.c ****     GPIO_PDD_ClearPortDataOutputMask(CSBit_MODULE_BASE_ADDRESS, CSBit_PORT_MASK);
 182              		.loc 1 205 0
 183 001e 034B     		ldr	r3, .L12
 184 0020 0122     		mov	r2, #1
 185 0022 9A60     		str	r2, [r3, #8]
 186              	.L9:
 206:../Generated_Code/CSBit.c ****   } /* !Val */
 207:../Generated_Code/CSBit.c **** }
 187              		.loc 1 207 0
 188 0024 BD46     		mov	sp, r7
 189 0026 02B0     		add	sp, sp, #8
 190              		@ sp needed for prologue
 191 0028 80BD     		pop	{r7, pc}
 192              	.L13:
 193 002a C046     		.align	2
 194              	.L12:
 195 002c C0F00FF8 		.word	-133173056
 196              		.cfi_endproc
 197              	.LFE2:
 199              		.section	.text.CSBit_ClrVal,"ax",%progbits
 200              		.align	2
 201              		.global	CSBit_ClrVal
 202              		.code	16
 203              		.thumb_func
 205              	CSBit_ClrVal:
 206              	.LFB3:
 208:../Generated_Code/CSBit.c **** 
 209:../Generated_Code/CSBit.c **** /*
 210:../Generated_Code/CSBit.c **** ** ===================================================================
 211:../Generated_Code/CSBit.c **** **     Method      :  CSBit_ClrVal (component BitIO_LDD)
 212:../Generated_Code/CSBit.c **** */
 213:../Generated_Code/CSBit.c **** /*!
 214:../Generated_Code/CSBit.c **** **     @brief
 215:../Generated_Code/CSBit.c **** **         Clears (set to zero) the output value. It is equivalent to
 216:../Generated_Code/CSBit.c **** **         the [PutVal(FALSE)]. This method is available only if the
 217:../Generated_Code/CSBit.c **** **         direction = _[output]_ or _[input/output]_.
 218:../Generated_Code/CSBit.c **** **     @param
 219:../Generated_Code/CSBit.c **** **         DeviceDataPtr   - Pointer to device data
 220:../Generated_Code/CSBit.c **** **                           structure returned by <Init> method.
 221:../Generated_Code/CSBit.c **** */
 222:../Generated_Code/CSBit.c **** /* ===================================================================*/
 223:../Generated_Code/CSBit.c **** void CSBit_ClrVal(LDD_TDeviceData *DeviceDataPtr)
 224:../Generated_Code/CSBit.c **** {
 207              		.loc 1 224 0
 208              		.cfi_startproc
 209 0000 80B5     		push	{r7, lr}
 210              	.LCFI9:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 82B0     		sub	sp, sp, #8
 215              	.LCFI10:
 216              		.cfi_def_cfa_offset 16
 217 0004 00AF     		add	r7, sp, #0
 218              	.LCFI11:
 219              		.cfi_def_cfa_register 7
 220 0006 7860     		str	r0, [r7, #4]
 225:../Generated_Code/CSBit.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 226:../Generated_Code/CSBit.c ****   GPIO_PDD_ClearPortDataOutputMask(CSBit_MODULE_BASE_ADDRESS, CSBit_PORT_MASK);
 221              		.loc 1 226 0
 222 0008 024B     		ldr	r3, .L15
 223 000a 0122     		mov	r2, #1
 224 000c 9A60     		str	r2, [r3, #8]
 227:../Generated_Code/CSBit.c **** }
 225              		.loc 1 227 0
 226 000e BD46     		mov	sp, r7
 227 0010 02B0     		add	sp, sp, #8
 228              		@ sp needed for prologue
 229 0012 80BD     		pop	{r7, pc}
 230              	.L16:
 231              		.align	2
 232              	.L15:
 233 0014 C0F00FF8 		.word	-133173056
 234              		.cfi_endproc
 235              	.LFE3:
 237              		.section	.text.CSBit_SetVal,"ax",%progbits
 238              		.align	2
 239              		.global	CSBit_SetVal
 240              		.code	16
 241              		.thumb_func
 243              	CSBit_SetVal:
 244              	.LFB4:
 228:../Generated_Code/CSBit.c **** 
 229:../Generated_Code/CSBit.c **** /*
 230:../Generated_Code/CSBit.c **** ** ===================================================================
 231:../Generated_Code/CSBit.c **** **     Method      :  CSBit_SetVal (component BitIO_LDD)
 232:../Generated_Code/CSBit.c **** */
 233:../Generated_Code/CSBit.c **** /*!
 234:../Generated_Code/CSBit.c **** **     @brief
 235:../Generated_Code/CSBit.c **** **         Sets (to one) the output value. It is equivalent to the
 236:../Generated_Code/CSBit.c **** **         [PutVal(TRUE)]. This method is available only if the
 237:../Generated_Code/CSBit.c **** **         direction = _[output]_ or _[input/output]_.
 238:../Generated_Code/CSBit.c **** **     @param
 239:../Generated_Code/CSBit.c **** **         DeviceDataPtr   - Pointer to device data
 240:../Generated_Code/CSBit.c **** **                           structure returned by <Init> method.
 241:../Generated_Code/CSBit.c **** */
 242:../Generated_Code/CSBit.c **** /* ===================================================================*/
 243:../Generated_Code/CSBit.c **** void CSBit_SetVal(LDD_TDeviceData *DeviceDataPtr)
 244:../Generated_Code/CSBit.c **** {
 245              		.loc 1 244 0
 246              		.cfi_startproc
 247 0000 80B5     		push	{r7, lr}
 248              	.LCFI12:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0002 82B0     		sub	sp, sp, #8
 253              	.LCFI13:
 254              		.cfi_def_cfa_offset 16
 255 0004 00AF     		add	r7, sp, #0
 256              	.LCFI14:
 257              		.cfi_def_cfa_register 7
 258 0006 7860     		str	r0, [r7, #4]
 245:../Generated_Code/CSBit.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 246:../Generated_Code/CSBit.c ****   GPIO_PDD_SetPortDataOutputMask(CSBit_MODULE_BASE_ADDRESS, CSBit_PORT_MASK);
 259              		.loc 1 246 0
 260 0008 024B     		ldr	r3, .L18
 261 000a 0122     		mov	r2, #1
 262 000c 5A60     		str	r2, [r3, #4]
 247:../Generated_Code/CSBit.c **** }
 263              		.loc 1 247 0
 264 000e BD46     		mov	sp, r7
 265 0010 02B0     		add	sp, sp, #8
 266              		@ sp needed for prologue
 267 0012 80BD     		pop	{r7, pc}
 268              	.L19:
 269              		.align	2
 270              	.L18:
 271 0014 C0F00FF8 		.word	-133173056
 272              		.cfi_endproc
 273              	.LFE4:
 275              		.text
 276              	.Letext0:
 277              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 278              		.file 3 "../Generated_Code/PE_Types.h"
 279              		.file 4 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CSBit.c
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:24     .text.CSBit_Init:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:29     .text.CSBit_Init:00000000 CSBit_Init
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:92     .text.CSBit_Init:0000004c $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:101    .text.CSBit_GetVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:106    .text.CSBit_GetVal:00000000 CSBit_GetVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:142    .text.CSBit_GetVal:00000024 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:147    .text.CSBit_PutVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:152    .text.CSBit_PutVal:00000000 CSBit_PutVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:195    .text.CSBit_PutVal:0000002c $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:200    .text.CSBit_ClrVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:205    .text.CSBit_ClrVal:00000000 CSBit_ClrVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:233    .text.CSBit_ClrVal:00000014 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:238    .text.CSBit_SetVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:243    .text.CSBit_SetVal:00000000 CSBit_SetVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccUlgo4M.s:271    .text.CSBit_SetVal:00000014 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.aba60cd3b17efbc2d56a1d9fc6f583a6
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.03d7426d632bb1a35ec1708754c41daf
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.2dd306b0ccbe86124098bfe3a0b58d88
                           .group:00000000 wm4.ansi_parms.h.64.05090287ebda70c0d79c02b050dca090
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.cstdint.137.268b37259d2d366c21376cbd280e10d7
                           .group:00000000 wm4.PE_Types.h.69.0f70e9553c29a787d42fe2ac9dbd945d
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.61.443ca05468cb0c6bf080e06394e39146
                           .group:00000000 wm4.MKL25Z4.h.61.adbdc31ae5ef570825ab0667cccdf447
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.GPIO_PDD.h.122.b35a34a6eaffa5c552aafe5692260473
                           .group:00000000 wm4.Cpu.h.64.f81ea9fa0d5dd4235933d360f41084fe
                           .group:00000000 wm4.CSBit.h.104.ab96d077140bad81822f0511b271f35e

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
