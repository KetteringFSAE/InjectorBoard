   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWMTimerRG.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.ChannelDevice,"a",%progbits
  18              		.align	2
  21              	ChannelDevice:
  22 0000 00       		.byte	0
  23 0001 01       		.byte	1
  24 0002 0000     		.section	.rodata.ChannelMode,"a",%progbits
  25              		.align	2
  28              	ChannelMode:
  29 0000 0000     		.space	2
  30 0002 0000     		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  31              		.align	2
  34              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  35 0000 00000000 		.space	12
  35      00000000 
  35      00000000 
  36              		.section	.bss.INT_TPM2__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  37              		.align	2
  40              	INT_TPM2__DEFAULT_RTOS_ISRPARAM:
  41 0000 00000000 		.space	4
  42              		.section	.text.PWMTimerRG_Init,"ax",%progbits
  43              		.align	2
  44              		.global	PWMTimerRG_Init
  45              		.code	16
  46              		.thumb_func
  48              	PWMTimerRG_Init:
  49              	.LFB0:
  50              		.file 1 "../Generated_Code/PWMTimerRG.c"
   1:../Generated_Code/PWMTimerRG.c **** /* ###################################################################
   2:../Generated_Code/PWMTimerRG.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/PWMTimerRG.c **** **     Filename    : PWMTimerRG.c
   4:../Generated_Code/PWMTimerRG.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/PWMTimerRG.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/PWMTimerRG.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/PWMTimerRG.c **** **     Version     : Component 01.164, Driver 01.11, CPU db: 3.00.000
   8:../Generated_Code/PWMTimerRG.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/PWMTimerRG.c **** **     Date/Time   : 2017-02-04, 20:44, # CodeGen: 16
  10:../Generated_Code/PWMTimerRG.c **** **     Abstract    :
  11:../Generated_Code/PWMTimerRG.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  12:../Generated_Code/PWMTimerRG.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  13:../Generated_Code/PWMTimerRG.c **** **     Settings    :
  14:../Generated_Code/PWMTimerRG.c **** **          Component name                                 : PWMTimerRG
  15:../Generated_Code/PWMTimerRG.c **** **          Module name                                    : TPM2
  16:../Generated_Code/PWMTimerRG.c **** **          Counter                                        : TPM2_CNT
  17:../Generated_Code/PWMTimerRG.c **** **          Counter direction                              : Up
  18:../Generated_Code/PWMTimerRG.c **** **          Counter width                                  : 16 bits
  19:../Generated_Code/PWMTimerRG.c **** **          Value type                                     : Optimal
  20:../Generated_Code/PWMTimerRG.c **** **          Input clock source                             : Internal
  21:../Generated_Code/PWMTimerRG.c **** **            Counter frequency                            : 24 MHz
  22:../Generated_Code/PWMTimerRG.c **** **          Counter restart                                : On-overrun
  23:../Generated_Code/PWMTimerRG.c **** **            Overrun period                               : 2.730667 ms
  24:../Generated_Code/PWMTimerRG.c **** **            Interrupt                                    : Enabled
  25:../Generated_Code/PWMTimerRG.c **** **              Interrupt                                  : INT_TPM2
  26:../Generated_Code/PWMTimerRG.c **** **              Interrupt priority                         : medium priority
  27:../Generated_Code/PWMTimerRG.c **** **          Channel list                                   : 2
  28:../Generated_Code/PWMTimerRG.c **** **            Channel 0                                    : 
  29:../Generated_Code/PWMTimerRG.c **** **              Mode                                       : Compare
  30:../Generated_Code/PWMTimerRG.c **** **                Compare                                  : TPM2_C0V
  31:../Generated_Code/PWMTimerRG.c **** **                Offset                                   : 0 timer-ticks
  32:../Generated_Code/PWMTimerRG.c **** **                Output on compare                        : Set
  33:../Generated_Code/PWMTimerRG.c **** **                  Output on overrun                      : Clear
  34:../Generated_Code/PWMTimerRG.c **** **                  Initial state                          : Low
  35:../Generated_Code/PWMTimerRG.c **** **                  Output pin                             : TSI0_CH11/PTB18/TPM2_CH0
  36:../Generated_Code/PWMTimerRG.c **** **                  Output pin signal                      : 
  37:../Generated_Code/PWMTimerRG.c **** **                Interrupt                                : Enabled
  38:../Generated_Code/PWMTimerRG.c **** **                  Interrupt                              : INT_TPM2
  39:../Generated_Code/PWMTimerRG.c **** **                  Interrupt priority                     : medium priority
  40:../Generated_Code/PWMTimerRG.c **** **            Channel 1                                    : 
  41:../Generated_Code/PWMTimerRG.c **** **              Mode                                       : Compare
  42:../Generated_Code/PWMTimerRG.c **** **                Compare                                  : TPM2_C1V
  43:../Generated_Code/PWMTimerRG.c **** **                Offset                                   : 21845 timer-ticks
  44:../Generated_Code/PWMTimerRG.c **** **                Output on compare                        : Set
  45:../Generated_Code/PWMTimerRG.c **** **                  Output on overrun                      : Clear
  46:../Generated_Code/PWMTimerRG.c **** **                  Initial state                          : Low
  47:../Generated_Code/PWMTimerRG.c **** **                  Output pin                             : TSI0_CH12/PTB19/TPM2_CH1
  48:../Generated_Code/PWMTimerRG.c **** **                  Output pin signal                      : 
  49:../Generated_Code/PWMTimerRG.c **** **                Interrupt                                : Disabled
  50:../Generated_Code/PWMTimerRG.c **** **          Initialization                                 : 
  51:../Generated_Code/PWMTimerRG.c **** **            Enabled in init. code                        : yes
  52:../Generated_Code/PWMTimerRG.c **** **            Auto initialization                          : no
  53:../Generated_Code/PWMTimerRG.c **** **            Event mask                                   : 
  54:../Generated_Code/PWMTimerRG.c **** **              OnCounterRestart                           : Enabled
  55:../Generated_Code/PWMTimerRG.c **** **              OnChannel0                                 : Enabled
  56:../Generated_Code/PWMTimerRG.c **** **              OnChannel1                                 : Disabled
  57:../Generated_Code/PWMTimerRG.c **** **              OnChannel2                                 : Disabled
  58:../Generated_Code/PWMTimerRG.c **** **              OnChannel3                                 : Disabled
  59:../Generated_Code/PWMTimerRG.c **** **              OnChannel4                                 : Disabled
  60:../Generated_Code/PWMTimerRG.c **** **              OnChannel5                                 : Disabled
  61:../Generated_Code/PWMTimerRG.c **** **              OnChannel6                                 : Disabled
  62:../Generated_Code/PWMTimerRG.c **** **              OnChannel7                                 : Disabled
  63:../Generated_Code/PWMTimerRG.c **** **          CPU clock/configuration selection              : 
  64:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 0                        : This component enabled
  65:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 1                        : This component disabled
  66:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 2                        : This component disabled
  67:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 3                        : This component disabled
  68:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 4                        : This component disabled
  69:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 5                        : This component disabled
  70:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 6                        : This component disabled
  71:../Generated_Code/PWMTimerRG.c **** **            Clock configuration 7                        : This component disabled
  72:../Generated_Code/PWMTimerRG.c **** **     Contents    :
  73:../Generated_Code/PWMTimerRG.c **** **         Init            - LDD_TDeviceData* PWMTimerRG_Init(LDD_TUserData *UserDataPtr);
  74:../Generated_Code/PWMTimerRG.c **** **         Deinit          - void PWMTimerRG_Deinit(LDD_TDeviceData *DeviceDataPtr);
  75:../Generated_Code/PWMTimerRG.c **** **         Enable          - LDD_TError PWMTimerRG_Enable(LDD_TDeviceData *DeviceDataPtr);
  76:../Generated_Code/PWMTimerRG.c **** **         Disable         - LDD_TError PWMTimerRG_Disable(LDD_TDeviceData *DeviceDataPtr);
  77:../Generated_Code/PWMTimerRG.c **** **         GetCounterValue - PWMTimerRG_TValueType PWMTimerRG_GetCounterValue(LDD_TDeviceData...
  78:../Generated_Code/PWMTimerRG.c **** **         SetOffsetTicks  - LDD_TError PWMTimerRG_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, u
  79:../Generated_Code/PWMTimerRG.c **** **         GetOffsetTicks  - LDD_TError PWMTimerRG_GetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, u
  80:../Generated_Code/PWMTimerRG.c **** **
  81:../Generated_Code/PWMTimerRG.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  82:../Generated_Code/PWMTimerRG.c **** **     All Rights Reserved.
  83:../Generated_Code/PWMTimerRG.c **** **     
  84:../Generated_Code/PWMTimerRG.c **** **     Redistribution and use in source and binary forms, with or without modification,
  85:../Generated_Code/PWMTimerRG.c **** **     are permitted provided that the following conditions are met:
  86:../Generated_Code/PWMTimerRG.c **** **     
  87:../Generated_Code/PWMTimerRG.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  88:../Generated_Code/PWMTimerRG.c **** **       of conditions and the following disclaimer.
  89:../Generated_Code/PWMTimerRG.c **** **     
  90:../Generated_Code/PWMTimerRG.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  91:../Generated_Code/PWMTimerRG.c **** **       list of conditions and the following disclaimer in the documentation and/or
  92:../Generated_Code/PWMTimerRG.c **** **       other materials provided with the distribution.
  93:../Generated_Code/PWMTimerRG.c **** **     
  94:../Generated_Code/PWMTimerRG.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  95:../Generated_Code/PWMTimerRG.c **** **       contributors may be used to endorse or promote products derived from this
  96:../Generated_Code/PWMTimerRG.c **** **       software without specific prior written permission.
  97:../Generated_Code/PWMTimerRG.c **** **     
  98:../Generated_Code/PWMTimerRG.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  99:../Generated_Code/PWMTimerRG.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 100:../Generated_Code/PWMTimerRG.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 101:../Generated_Code/PWMTimerRG.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 102:../Generated_Code/PWMTimerRG.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 103:../Generated_Code/PWMTimerRG.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 104:../Generated_Code/PWMTimerRG.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 105:../Generated_Code/PWMTimerRG.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 106:../Generated_Code/PWMTimerRG.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 107:../Generated_Code/PWMTimerRG.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 108:../Generated_Code/PWMTimerRG.c **** **     
 109:../Generated_Code/PWMTimerRG.c **** **     http: www.freescale.com
 110:../Generated_Code/PWMTimerRG.c **** **     mail: support@freescale.com
 111:../Generated_Code/PWMTimerRG.c **** ** ###################################################################*/
 112:../Generated_Code/PWMTimerRG.c **** /*!
 113:../Generated_Code/PWMTimerRG.c **** ** @file PWMTimerRG.c
 114:../Generated_Code/PWMTimerRG.c **** ** @version 01.11
 115:../Generated_Code/PWMTimerRG.c **** ** @brief
 116:../Generated_Code/PWMTimerRG.c **** **          This TimerUnit component provides a low level API for unified hardware access across
 117:../Generated_Code/PWMTimerRG.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
 118:../Generated_Code/PWMTimerRG.c **** */         
 119:../Generated_Code/PWMTimerRG.c **** /*!
 120:../Generated_Code/PWMTimerRG.c **** **  @addtogroup PWMTimerRG_module PWMTimerRG module documentation
 121:../Generated_Code/PWMTimerRG.c **** **  @{
 122:../Generated_Code/PWMTimerRG.c **** */         
 123:../Generated_Code/PWMTimerRG.c **** 
 124:../Generated_Code/PWMTimerRG.c **** /* MODULE PWMTimerRG. */
 125:../Generated_Code/PWMTimerRG.c **** 
 126:../Generated_Code/PWMTimerRG.c **** #include "Events.h"
 127:../Generated_Code/PWMTimerRG.c **** #include "PWMTimerRG.h"
 128:../Generated_Code/PWMTimerRG.c **** /* {Default RTOS Adapter} No RTOS includes */
 129:../Generated_Code/PWMTimerRG.c **** #include "IO_Map.h"
 130:../Generated_Code/PWMTimerRG.c **** 
 131:../Generated_Code/PWMTimerRG.c **** #ifdef __cplusplus
 132:../Generated_Code/PWMTimerRG.c **** extern "C" {
 133:../Generated_Code/PWMTimerRG.c **** #endif 
 134:../Generated_Code/PWMTimerRG.c **** 
 135:../Generated_Code/PWMTimerRG.c **** /* List of channels used by component */
 136:../Generated_Code/PWMTimerRG.c **** static const uint8_t ChannelDevice[PWMTimerRG_NUMBER_OF_CHANNELS] = {0x00U,0x01U};
 137:../Generated_Code/PWMTimerRG.c **** 
 138:../Generated_Code/PWMTimerRG.c **** /* Table of channels mode / 0 - compare mode, 1 - capture mode */
 139:../Generated_Code/PWMTimerRG.c **** static const uint8_t ChannelMode[PWMTimerRG_NUMBER_OF_CHANNELS] = {0x00U,0x00U};
 140:../Generated_Code/PWMTimerRG.c **** 
 141:../Generated_Code/PWMTimerRG.c **** 
 142:../Generated_Code/PWMTimerRG.c **** typedef struct {
 143:../Generated_Code/PWMTimerRG.c ****   LDD_TEventMask EnEvents;             /* Enable/Disable events mask */
 144:../Generated_Code/PWMTimerRG.c ****   uint32_t Source;                     /* Current source clock */
 145:../Generated_Code/PWMTimerRG.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 146:../Generated_Code/PWMTimerRG.c **** } PWMTimerRG_TDeviceData;
 147:../Generated_Code/PWMTimerRG.c **** 
 148:../Generated_Code/PWMTimerRG.c **** typedef PWMTimerRG_TDeviceData *PWMTimerRG_TDeviceDataPtr; /* Pointer to the device data structure.
 149:../Generated_Code/PWMTimerRG.c **** 
 150:../Generated_Code/PWMTimerRG.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 151:../Generated_Code/PWMTimerRG.c **** static PWMTimerRG_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 152:../Generated_Code/PWMTimerRG.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 153:../Generated_Code/PWMTimerRG.c **** static PWMTimerRG_TDeviceDataPtr INT_TPM2__DEFAULT_RTOS_ISRPARAM;
 154:../Generated_Code/PWMTimerRG.c **** 
 155:../Generated_Code/PWMTimerRG.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_TIMERUNIT_ON_CHANNEL_0 | LDD_TIMERUNIT_ON_COUNTE
 156:../Generated_Code/PWMTimerRG.c **** #define AVAILABLE_PIN_MASK (LDD_TPinMask)(PWMTimerRG_CHANNEL_0_PIN | PWMTimerRG_CHANNEL_1_PIN)
 157:../Generated_Code/PWMTimerRG.c **** #define LAST_CHANNEL 0x01U
 158:../Generated_Code/PWMTimerRG.c **** 
 159:../Generated_Code/PWMTimerRG.c **** /* Internal method prototypes */
 160:../Generated_Code/PWMTimerRG.c **** /*
 161:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 162:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_Init (component TimerUnit_LDD)
 163:../Generated_Code/PWMTimerRG.c **** */
 164:../Generated_Code/PWMTimerRG.c **** /*!
 165:../Generated_Code/PWMTimerRG.c **** **     @brief
 166:../Generated_Code/PWMTimerRG.c **** **         Initializes the device. Allocates memory for the device data
 167:../Generated_Code/PWMTimerRG.c **** **         structure, allocates interrupt vectors and sets interrupt
 168:../Generated_Code/PWMTimerRG.c **** **         priority, sets pin routing, sets timing, etc. If the
 169:../Generated_Code/PWMTimerRG.c **** **         property ["Enable in init. code"] is set to "yes" value then
 170:../Generated_Code/PWMTimerRG.c **** **         the device is also enabled (see the description of the
 171:../Generated_Code/PWMTimerRG.c **** **         [Enable] method). In this case the [Enable] method is not
 172:../Generated_Code/PWMTimerRG.c **** **         necessary and needn't to be generated. This method can be
 173:../Generated_Code/PWMTimerRG.c **** **         called only once. Before the second call of Init the [Deinit]
 174:../Generated_Code/PWMTimerRG.c **** **         must be called first.
 175:../Generated_Code/PWMTimerRG.c **** **     @param
 176:../Generated_Code/PWMTimerRG.c **** **         UserDataPtr     - Pointer to the user or
 177:../Generated_Code/PWMTimerRG.c **** **                           RTOS specific data. This pointer will be
 178:../Generated_Code/PWMTimerRG.c **** **                           passed as an event or callback parameter.
 179:../Generated_Code/PWMTimerRG.c **** **     @return
 180:../Generated_Code/PWMTimerRG.c **** **                         - Pointer to the dynamically allocated private
 181:../Generated_Code/PWMTimerRG.c **** **                           structure or NULL if there was an error.
 182:../Generated_Code/PWMTimerRG.c **** */
 183:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 184:../Generated_Code/PWMTimerRG.c **** LDD_TDeviceData* PWMTimerRG_Init(LDD_TUserData *UserDataPtr)
 185:../Generated_Code/PWMTimerRG.c **** {
  51              		.loc 1 185 0
  52              		.cfi_startproc
  53 0000 80B5     		push	{r7, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 84B0     		sub	sp, sp, #16
  59              	.LCFI1:
  60              		.cfi_def_cfa_offset 24
  61 0004 00AF     		add	r7, sp, #0
  62              	.LCFI2:
  63              		.cfi_def_cfa_register 7
  64 0006 7860     		str	r0, [r7, #4]
 186:../Generated_Code/PWMTimerRG.c ****   /* Allocate device structure */
 187:../Generated_Code/PWMTimerRG.c ****   PWMTimerRG_TDeviceData *DeviceDataPrv;
 188:../Generated_Code/PWMTimerRG.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 189:../Generated_Code/PWMTimerRG.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  65              		.loc 1 189 0
  66 0008 314B     		ldr	r3, .L3
  67 000a FB60     		str	r3, [r7, #12]
 190:../Generated_Code/PWMTimerRG.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  68              		.loc 1 190 0
  69 000c FB68     		ldr	r3, [r7, #12]
  70 000e 7A68     		ldr	r2, [r7, #4]
  71 0010 9A60     		str	r2, [r3, #8]
 191:../Generated_Code/PWMTimerRG.c ****   /* Interrupt vector(s) allocation */
 192:../Generated_Code/PWMTimerRG.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 193:../Generated_Code/PWMTimerRG.c ****   INT_TPM2__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  72              		.loc 1 193 0
  73 0012 304B     		ldr	r3, .L3+4
  74 0014 FA68     		ldr	r2, [r7, #12]
  75 0016 1A60     		str	r2, [r3]
 194:../Generated_Code/PWMTimerRG.c ****   /* SIM_SCGC6: TPM2=1 */
 195:../Generated_Code/PWMTimerRG.c ****   SIM_SCGC6 |= SIM_SCGC6_TPM2_MASK;
  76              		.loc 1 195 0
  77 0018 2F4A     		ldr	r2, .L3+8
  78 001a 2F49     		ldr	r1, .L3+8
  79 001c 2F4B     		ldr	r3, .L3+12
  80 001e CB58     		ldr	r3, [r1, r3]
  81 0020 8021     		mov	r1, #128
  82 0022 C904     		lsl	r1, r1, #19
  83 0024 1943     		orr	r1, r3
  84 0026 2D4B     		ldr	r3, .L3+12
  85 0028 D150     		str	r1, [r2, r3]
 196:../Generated_Code/PWMTimerRG.c ****   /* TPM2_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 197:../Generated_Code/PWMTimerRG.c ****   TPM2_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
  86              		.loc 1 197 0
  87 002a 2D4B     		ldr	r3, .L3+16
  88 002c 0022     		mov	r2, #0
  89 002e 1A60     		str	r2, [r3]
 198:../Generated_Code/PWMTimerRG.c ****   /* TPM2_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUN
 199:../Generated_Code/PWMTimerRG.c ****   TPM2_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
  90              		.loc 1 199 0
  91 0030 2B4B     		ldr	r3, .L3+16
  92 0032 0022     		mov	r2, #0
  93 0034 5A60     		str	r2, [r3, #4]
 200:../Generated_Code/PWMTimerRG.c ****   /* TPM2_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 201:../Generated_Code/PWMTimerRG.c ****   TPM2_C0SC = 0x00U;                   /* Clear channel status and control register */
  94              		.loc 1 201 0
  95 0036 2A4B     		ldr	r3, .L3+16
  96 0038 0022     		mov	r2, #0
  97 003a DA60     		str	r2, [r3, #12]
 202:../Generated_Code/PWMTimerRG.c ****   /* TPM2_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 203:../Generated_Code/PWMTimerRG.c ****   TPM2_C1SC = 0x00U;                   /* Clear channel status and control register */
  98              		.loc 1 203 0
  99 003c 284B     		ldr	r3, .L3+16
 100 003e 0022     		mov	r2, #0
 101 0040 5A61     		str	r2, [r3, #20]
 204:../Generated_Code/PWMTimerRG.c ****   /* TPM2_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=
 205:../Generated_Code/PWMTimerRG.c ****   TPM2_MOD = TPM_MOD_MOD(0xFFFF);      /* Set up modulo register */
 102              		.loc 1 205 0
 103 0042 274B     		ldr	r3, .L3+16
 104 0044 274A     		ldr	r2, .L3+20
 105 0046 9A60     		str	r2, [r3, #8]
 206:../Generated_Code/PWMTimerRG.c ****   /* TPM2_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 207:../Generated_Code/PWMTimerRG.c ****   TPM2_C0SC = TPM_CnSC_CHIE_MASK |
 106              		.loc 1 207 0
 107 0048 254B     		ldr	r3, .L3+16
 108 004a 6C22     		mov	r2, #108
 109 004c DA60     		str	r2, [r3, #12]
 208:../Generated_Code/PWMTimerRG.c ****               TPM_CnSC_MSB_MASK |
 209:../Generated_Code/PWMTimerRG.c ****               TPM_CnSC_ELSB_MASK |
 210:../Generated_Code/PWMTimerRG.c ****               TPM_CnSC_ELSA_MASK;      /* Set up channel status and control register */
 211:../Generated_Code/PWMTimerRG.c ****   /* TPM2_C0V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=
 212:../Generated_Code/PWMTimerRG.c ****   TPM2_C0V = TPM_CnV_VAL(0x00);        /* Set up channel value register */
 110              		.loc 1 212 0
 111 004e 244B     		ldr	r3, .L3+16
 112 0050 0022     		mov	r2, #0
 113 0052 1A61     		str	r2, [r3, #16]
 213:../Generated_Code/PWMTimerRG.c ****   /* TPM2_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 214:../Generated_Code/PWMTimerRG.c ****   TPM2_C1SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel stat
 114              		.loc 1 214 0
 115 0054 224B     		ldr	r3, .L3+16
 116 0056 2C22     		mov	r2, #44
 117 0058 5A61     		str	r2, [r3, #20]
 215:../Generated_Code/PWMTimerRG.c ****   /* TPM2_C1V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=
 216:../Generated_Code/PWMTimerRG.c ****   TPM2_C1V = TPM_CnV_VAL(0x5555);      /* Set up channel value register */
 118              		.loc 1 216 0
 119 005a 214B     		ldr	r3, .L3+16
 120 005c 224A     		ldr	r2, .L3+24
 121 005e 9A61     		str	r2, [r3, #24]
 217:../Generated_Code/PWMTimerRG.c ****   /* PORTB_PCR18: ISF=0,MUX=3 */
 218:../Generated_Code/PWMTimerRG.c ****   PORTB_PCR18 = (uint32_t)((PORTB_PCR18 & (uint32_t)~(uint32_t)(
 122              		.loc 1 218 0
 123 0060 224B     		ldr	r3, .L3+28
 124 0062 224A     		ldr	r2, .L3+28
 125 0064 916C     		ldr	r1, [r2, #72]
 126 0066 224A     		ldr	r2, .L3+32
 127 0068 0A40     		and	r2, r1
 128 006a C021     		mov	r1, #192
 129 006c 8900     		lsl	r1, r1, #2
 130 006e 0A43     		orr	r2, r1
 131 0070 9A64     		str	r2, [r3, #72]
 219:../Generated_Code/PWMTimerRG.c ****                  PORT_PCR_ISF_MASK |
 220:../Generated_Code/PWMTimerRG.c ****                  PORT_PCR_MUX(0x04)
 221:../Generated_Code/PWMTimerRG.c ****                 )) | (uint32_t)(
 222:../Generated_Code/PWMTimerRG.c ****                  PORT_PCR_MUX(0x03)
 223:../Generated_Code/PWMTimerRG.c ****                 ));
 224:../Generated_Code/PWMTimerRG.c ****   /* PORTB_PCR19: ISF=0,MUX=3 */
 225:../Generated_Code/PWMTimerRG.c ****   PORTB_PCR19 = (uint32_t)((PORTB_PCR19 & (uint32_t)~(uint32_t)(
 132              		.loc 1 225 0
 133 0072 1E4B     		ldr	r3, .L3+28
 134 0074 1D4A     		ldr	r2, .L3+28
 135 0076 D16C     		ldr	r1, [r2, #76]
 136 0078 1D4A     		ldr	r2, .L3+32
 137 007a 0A40     		and	r2, r1
 138 007c C021     		mov	r1, #192
 139 007e 8900     		lsl	r1, r1, #2
 140 0080 0A43     		orr	r2, r1
 141 0082 DA64     		str	r2, [r3, #76]
 226:../Generated_Code/PWMTimerRG.c ****                  PORT_PCR_ISF_MASK |
 227:../Generated_Code/PWMTimerRG.c ****                  PORT_PCR_MUX(0x04)
 228:../Generated_Code/PWMTimerRG.c ****                 )) | (uint32_t)(
 229:../Generated_Code/PWMTimerRG.c ****                  PORT_PCR_MUX(0x03)
 230:../Generated_Code/PWMTimerRG.c ****                 ));
 231:../Generated_Code/PWMTimerRG.c ****   DeviceDataPrv->EnEvents = 0x0101U;   /* Enable selected events */
 142              		.loc 1 231 0
 143 0084 FB68     		ldr	r3, [r7, #12]
 144 0086 1B4A     		ldr	r2, .L3+36
 145 0088 1A60     		str	r2, [r3]
 232:../Generated_Code/PWMTimerRG.c ****   DeviceDataPrv->Source = TPM_PDD_SYSTEM; /* Store clock source */
 146              		.loc 1 232 0
 147 008a FB68     		ldr	r3, [r7, #12]
 148 008c 0822     		mov	r2, #8
 149 008e 5A60     		str	r2, [r3, #4]
 233:../Generated_Code/PWMTimerRG.c ****   /* NVIC_IPR4: PRI_19=0x80 */
 234:../Generated_Code/PWMTimerRG.c ****   NVIC_IPR4 = (uint32_t)((NVIC_IPR4 & (uint32_t)~(uint32_t)(
 150              		.loc 1 234 0
 151 0090 194A     		ldr	r2, .L3+40
 152 0092 1949     		ldr	r1, .L3+40
 153 0094 C423     		mov	r3, #196
 154 0096 9B00     		lsl	r3, r3, #2
 155 0098 CB58     		ldr	r3, [r1, r3]
 156 009a 1B02     		lsl	r3, r3, #8
 157 009c 1B0A     		lsr	r3, r3, #8
 158 009e 8021     		mov	r1, #128
 159 00a0 0906     		lsl	r1, r1, #24
 160 00a2 1943     		orr	r1, r3
 161 00a4 C423     		mov	r3, #196
 162 00a6 9B00     		lsl	r3, r3, #2
 163 00a8 D150     		str	r1, [r2, r3]
 235:../Generated_Code/PWMTimerRG.c ****                NVIC_IP_PRI_19(0x7F)
 236:../Generated_Code/PWMTimerRG.c ****               )) | (uint32_t)(
 237:../Generated_Code/PWMTimerRG.c ****                NVIC_IP_PRI_19(0x80)
 238:../Generated_Code/PWMTimerRG.c ****               ));
 239:../Generated_Code/PWMTimerRG.c ****   /* NVIC_ISER: SETENA|=0x00080000 */
 240:../Generated_Code/PWMTimerRG.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x00080000);
 164              		.loc 1 240 0
 165 00aa 134B     		ldr	r3, .L3+40
 166 00ac 124A     		ldr	r2, .L3+40
 167 00ae 1268     		ldr	r2, [r2]
 168 00b0 8021     		mov	r1, #128
 169 00b2 0903     		lsl	r1, r1, #12
 170 00b4 0A43     		orr	r2, r1
 171 00b6 1A60     		str	r2, [r3]
 241:../Generated_Code/PWMTimerRG.c ****   /* TPM2_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 242:../Generated_Code/PWMTimerRG.c ****   TPM2_SC = (TPM_SC_TOIE_MASK | TPM_SC_CMOD(0x01) | TPM_SC_PS(0x01)); /* Set up status and control 
 172              		.loc 1 242 0
 173 00b8 094B     		ldr	r3, .L3+16
 174 00ba 4922     		mov	r2, #73
 175 00bc 1A60     		str	r2, [r3]
 243:../Generated_Code/PWMTimerRG.c ****   /* Registration of the device structure */
 244:../Generated_Code/PWMTimerRG.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PWMTimerRG_ID,DeviceDataPrv);
 176              		.loc 1 244 0
 177 00be 0F4B     		ldr	r3, .L3+44
 178 00c0 FA68     		ldr	r2, [r7, #12]
 179 00c2 1A60     		str	r2, [r3]
 245:../Generated_Code/PWMTimerRG.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 180              		.loc 1 245 0
 181 00c4 FB68     		ldr	r3, [r7, #12]
 246:../Generated_Code/PWMTimerRG.c **** }
 182              		.loc 1 246 0
 183 00c6 181C     		mov	r0, r3
 184 00c8 BD46     		mov	sp, r7
 185 00ca 04B0     		add	sp, sp, #16
 186              		@ sp needed for prologue
 187 00cc 80BD     		pop	{r7, pc}
 188              	.L4:
 189 00ce C046     		.align	2
 190              	.L3:
 191 00d0 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 192 00d4 00000000 		.word	INT_TPM2__DEFAULT_RTOS_ISRPARAM
 193 00d8 00700440 		.word	1074032640
 194 00dc 3C100000 		.word	4156
 195 00e0 00A00340 		.word	1073979392
 196 00e4 FFFF0000 		.word	65535
 197 00e8 55550000 		.word	21845
 198 00ec 00A00440 		.word	1074044928
 199 00f0 FFF8FFFE 		.word	-16779009
 200 00f4 01010000 		.word	257
 201 00f8 00E100E0 		.word	-536813312
 202 00fc 00000000 		.word	PE_LDD_DeviceDataList
 203              		.cfi_endproc
 204              	.LFE0:
 206              		.section	.text.PWMTimerRG_Deinit,"ax",%progbits
 207              		.align	2
 208              		.global	PWMTimerRG_Deinit
 209              		.code	16
 210              		.thumb_func
 212              	PWMTimerRG_Deinit:
 213              	.LFB1:
 247:../Generated_Code/PWMTimerRG.c **** 
 248:../Generated_Code/PWMTimerRG.c **** /*
 249:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 250:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_Deinit (component TimerUnit_LDD)
 251:../Generated_Code/PWMTimerRG.c **** */
 252:../Generated_Code/PWMTimerRG.c **** /*!
 253:../Generated_Code/PWMTimerRG.c **** **     @brief
 254:../Generated_Code/PWMTimerRG.c **** **         Deinitializes the device. Switches off the device, frees the
 255:../Generated_Code/PWMTimerRG.c **** **         device data structure memory, interrupts vectors, etc.
 256:../Generated_Code/PWMTimerRG.c **** **     @param
 257:../Generated_Code/PWMTimerRG.c **** **         DeviceDataPtr   - Device data structure
 258:../Generated_Code/PWMTimerRG.c **** **                           pointer returned by Init method
 259:../Generated_Code/PWMTimerRG.c **** */
 260:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 261:../Generated_Code/PWMTimerRG.c **** void PWMTimerRG_Deinit(LDD_TDeviceData *DeviceDataPtr)
 262:../Generated_Code/PWMTimerRG.c **** {
 214              		.loc 1 262 0
 215              		.cfi_startproc
 216 0000 80B5     		push	{r7, lr}
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 84B0     		sub	sp, sp, #16
 222              	.LCFI4:
 223              		.cfi_def_cfa_offset 24
 224 0004 00AF     		add	r7, sp, #0
 225              	.LCFI5:
 226              		.cfi_def_cfa_register 7
 227 0006 7860     		str	r0, [r7, #4]
 263:../Generated_Code/PWMTimerRG.c ****   PWMTimerRG_TDeviceData *DeviceDataPrv = (PWMTimerRG_TDeviceData *)DeviceDataPtr;
 228              		.loc 1 263 0
 229 0008 7B68     		ldr	r3, [r7, #4]
 230 000a FB60     		str	r3, [r7, #12]
 264:../Generated_Code/PWMTimerRG.c **** 
 265:../Generated_Code/PWMTimerRG.c ****   (void)DeviceDataPrv;
 266:../Generated_Code/PWMTimerRG.c ****   TPM_PDD_SelectPrescalerSource(TPM2_BASE_PTR, TPM_PDD_DISABLED);
 231              		.loc 1 266 0
 232 000c 054B     		ldr	r3, .L6
 233 000e 054A     		ldr	r2, .L6
 234 0010 1268     		ldr	r2, [r2]
 235 0012 9821     		mov	r1, #152
 236 0014 8A43     		bic	r2, r1
 237 0016 1A60     		str	r2, [r3]
 267:../Generated_Code/PWMTimerRG.c ****   /* Interrupt vector(s) deallocation */
 268:../Generated_Code/PWMTimerRG.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 269:../Generated_Code/PWMTimerRG.c ****   /* Unregistration of the device structure */
 270:../Generated_Code/PWMTimerRG.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PWMTimerRG_ID);
 238              		.loc 1 270 0
 239 0018 034B     		ldr	r3, .L6+4
 240 001a 0022     		mov	r2, #0
 241 001c 1A60     		str	r2, [r3]
 271:../Generated_Code/PWMTimerRG.c ****   /* Deallocation of the device structure */
 272:../Generated_Code/PWMTimerRG.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 273:../Generated_Code/PWMTimerRG.c **** }
 242              		.loc 1 273 0
 243 001e BD46     		mov	sp, r7
 244 0020 04B0     		add	sp, sp, #16
 245              		@ sp needed for prologue
 246 0022 80BD     		pop	{r7, pc}
 247              	.L7:
 248              		.align	2
 249              	.L6:
 250 0024 00A00340 		.word	1073979392
 251 0028 00000000 		.word	PE_LDD_DeviceDataList
 252              		.cfi_endproc
 253              	.LFE1:
 255              		.section	.text.PWMTimerRG_Enable,"ax",%progbits
 256              		.align	2
 257              		.global	PWMTimerRG_Enable
 258              		.code	16
 259              		.thumb_func
 261              	PWMTimerRG_Enable:
 262              	.LFB2:
 274:../Generated_Code/PWMTimerRG.c **** 
 275:../Generated_Code/PWMTimerRG.c **** /*
 276:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 277:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_Enable (component TimerUnit_LDD)
 278:../Generated_Code/PWMTimerRG.c **** */
 279:../Generated_Code/PWMTimerRG.c **** /*!
 280:../Generated_Code/PWMTimerRG.c **** **     @brief
 281:../Generated_Code/PWMTimerRG.c **** **         Enables the component - it starts the signal generation.
 282:../Generated_Code/PWMTimerRG.c **** **         Events may be generated (see SetEventMask). The method is
 283:../Generated_Code/PWMTimerRG.c **** **         not available if the counter can't be disabled/enabled by HW.
 284:../Generated_Code/PWMTimerRG.c **** **     @param
 285:../Generated_Code/PWMTimerRG.c **** **         DeviceDataPtr   - Device data structure
 286:../Generated_Code/PWMTimerRG.c **** **                           pointer returned by [Init] method.
 287:../Generated_Code/PWMTimerRG.c **** **     @return
 288:../Generated_Code/PWMTimerRG.c **** **                         - Error code, possible codes:
 289:../Generated_Code/PWMTimerRG.c **** **                           ERR_OK - OK
 290:../Generated_Code/PWMTimerRG.c **** **                           ERR_SPEED - The component does not work in
 291:../Generated_Code/PWMTimerRG.c **** **                           the active clock configuration
 292:../Generated_Code/PWMTimerRG.c **** */
 293:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 294:../Generated_Code/PWMTimerRG.c **** LDD_TError PWMTimerRG_Enable(LDD_TDeviceData *DeviceDataPtr)
 295:../Generated_Code/PWMTimerRG.c **** {
 263              		.loc 1 295 0
 264              		.cfi_startproc
 265 0000 80B5     		push	{r7, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 84B0     		sub	sp, sp, #16
 271              	.LCFI7:
 272              		.cfi_def_cfa_offset 24
 273 0004 00AF     		add	r7, sp, #0
 274              	.LCFI8:
 275              		.cfi_def_cfa_register 7
 276 0006 7860     		str	r0, [r7, #4]
 296:../Generated_Code/PWMTimerRG.c ****   PWMTimerRG_TDeviceData *DeviceDataPrv = (PWMTimerRG_TDeviceData *)DeviceDataPtr;
 277              		.loc 1 296 0
 278 0008 7B68     		ldr	r3, [r7, #4]
 279 000a FB60     		str	r3, [r7, #12]
 297:../Generated_Code/PWMTimerRG.c **** 
 298:../Generated_Code/PWMTimerRG.c ****   TPM_PDD_SelectPrescalerSource(TPM2_BASE_PTR, DeviceDataPrv->Source); /* Enable the device */
 280              		.loc 1 298 0
 281 000c 074B     		ldr	r3, .L10
 282 000e 074A     		ldr	r2, .L10
 283 0010 1268     		ldr	r2, [r2]
 284 0012 9821     		mov	r1, #152
 285 0014 101C     		mov	r0, r2
 286 0016 8843     		bic	r0, r1
 287 0018 011C     		mov	r1, r0
 288 001a FA68     		ldr	r2, [r7, #12]
 289 001c 5268     		ldr	r2, [r2, #4]
 290 001e 0A43     		orr	r2, r1
 291 0020 1A60     		str	r2, [r3]
 299:../Generated_Code/PWMTimerRG.c ****   return ERR_OK;
 292              		.loc 1 299 0
 293 0022 0023     		mov	r3, #0
 300:../Generated_Code/PWMTimerRG.c **** }
 294              		.loc 1 300 0
 295 0024 181C     		mov	r0, r3
 296 0026 BD46     		mov	sp, r7
 297 0028 04B0     		add	sp, sp, #16
 298              		@ sp needed for prologue
 299 002a 80BD     		pop	{r7, pc}
 300              	.L11:
 301              		.align	2
 302              	.L10:
 303 002c 00A00340 		.word	1073979392
 304              		.cfi_endproc
 305              	.LFE2:
 307              		.section	.text.PWMTimerRG_Disable,"ax",%progbits
 308              		.align	2
 309              		.global	PWMTimerRG_Disable
 310              		.code	16
 311              		.thumb_func
 313              	PWMTimerRG_Disable:
 314              	.LFB3:
 301:../Generated_Code/PWMTimerRG.c **** 
 302:../Generated_Code/PWMTimerRG.c **** /*
 303:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 304:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_Disable (component TimerUnit_LDD)
 305:../Generated_Code/PWMTimerRG.c **** */
 306:../Generated_Code/PWMTimerRG.c **** /*!
 307:../Generated_Code/PWMTimerRG.c **** **     @brief
 308:../Generated_Code/PWMTimerRG.c **** **         Disables the component - it stops signal generation and
 309:../Generated_Code/PWMTimerRG.c **** **         events calling. The method is not available if the counter
 310:../Generated_Code/PWMTimerRG.c **** **         can't be disabled/enabled by HW.
 311:../Generated_Code/PWMTimerRG.c **** **     @param
 312:../Generated_Code/PWMTimerRG.c **** **         DeviceDataPtr   - Device data structure
 313:../Generated_Code/PWMTimerRG.c **** **                           pointer returned by [Init] method.
 314:../Generated_Code/PWMTimerRG.c **** **     @return
 315:../Generated_Code/PWMTimerRG.c **** **                         - Error code, possible codes:
 316:../Generated_Code/PWMTimerRG.c **** **                           ERR_OK - OK
 317:../Generated_Code/PWMTimerRG.c **** **                           ERR_SPEED - The component does not work in
 318:../Generated_Code/PWMTimerRG.c **** **                           the active clock configuration
 319:../Generated_Code/PWMTimerRG.c **** */
 320:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 321:../Generated_Code/PWMTimerRG.c **** LDD_TError PWMTimerRG_Disable(LDD_TDeviceData *DeviceDataPtr)
 322:../Generated_Code/PWMTimerRG.c **** {
 315              		.loc 1 322 0
 316              		.cfi_startproc
 317 0000 80B5     		push	{r7, lr}
 318              	.LCFI9:
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 7, -8
 321              		.cfi_offset 14, -4
 322 0002 82B0     		sub	sp, sp, #8
 323              	.LCFI10:
 324              		.cfi_def_cfa_offset 16
 325 0004 00AF     		add	r7, sp, #0
 326              	.LCFI11:
 327              		.cfi_def_cfa_register 7
 328 0006 7860     		str	r0, [r7, #4]
 323:../Generated_Code/PWMTimerRG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 324:../Generated_Code/PWMTimerRG.c ****   TPM_PDD_SelectPrescalerSource(TPM2_BASE_PTR, TPM_PDD_DISABLED);
 329              		.loc 1 324 0
 330 0008 054B     		ldr	r3, .L14
 331 000a 054A     		ldr	r2, .L14
 332 000c 1268     		ldr	r2, [r2]
 333 000e 9821     		mov	r1, #152
 334 0010 8A43     		bic	r2, r1
 335 0012 1A60     		str	r2, [r3]
 325:../Generated_Code/PWMTimerRG.c ****   return ERR_OK;
 336              		.loc 1 325 0
 337 0014 0023     		mov	r3, #0
 326:../Generated_Code/PWMTimerRG.c **** }
 338              		.loc 1 326 0
 339 0016 181C     		mov	r0, r3
 340 0018 BD46     		mov	sp, r7
 341 001a 02B0     		add	sp, sp, #8
 342              		@ sp needed for prologue
 343 001c 80BD     		pop	{r7, pc}
 344              	.L15:
 345 001e C046     		.align	2
 346              	.L14:
 347 0020 00A00340 		.word	1073979392
 348              		.cfi_endproc
 349              	.LFE3:
 351              		.section	.text.PWMTimerRG_GetCounterValue,"ax",%progbits
 352              		.align	2
 353              		.global	PWMTimerRG_GetCounterValue
 354              		.code	16
 355              		.thumb_func
 357              	PWMTimerRG_GetCounterValue:
 358              	.LFB4:
 327:../Generated_Code/PWMTimerRG.c **** 
 328:../Generated_Code/PWMTimerRG.c **** /*
 329:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 330:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_GetCounterValue (component TimerUnit_LDD)
 331:../Generated_Code/PWMTimerRG.c **** */
 332:../Generated_Code/PWMTimerRG.c **** /*!
 333:../Generated_Code/PWMTimerRG.c **** **     @brief
 334:../Generated_Code/PWMTimerRG.c **** **         Returns the content of counter register. This method can be
 335:../Generated_Code/PWMTimerRG.c **** **         used both if counter is enabled and if counter is disabled.
 336:../Generated_Code/PWMTimerRG.c **** **         The method is not available if HW doesn't allow reading of
 337:../Generated_Code/PWMTimerRG.c **** **         the counter.
 338:../Generated_Code/PWMTimerRG.c **** **     @param
 339:../Generated_Code/PWMTimerRG.c **** **         DeviceDataPtr   - Device data structure
 340:../Generated_Code/PWMTimerRG.c **** **                           pointer returned by [Init] method.
 341:../Generated_Code/PWMTimerRG.c **** **     @return
 342:../Generated_Code/PWMTimerRG.c **** **                         - Counter value (number of counted ticks).
 343:../Generated_Code/PWMTimerRG.c **** */
 344:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 345:../Generated_Code/PWMTimerRG.c **** PWMTimerRG_TValueType PWMTimerRG_GetCounterValue(LDD_TDeviceData *DeviceDataPtr)
 346:../Generated_Code/PWMTimerRG.c **** {
 359              		.loc 1 346 0
 360              		.cfi_startproc
 361 0000 80B5     		push	{r7, lr}
 362              	.LCFI12:
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 7, -8
 365              		.cfi_offset 14, -4
 366 0002 82B0     		sub	sp, sp, #8
 367              	.LCFI13:
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              	.LCFI14:
 371              		.cfi_def_cfa_register 7
 372 0006 7860     		str	r0, [r7, #4]
 347:../Generated_Code/PWMTimerRG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 348:../Generated_Code/PWMTimerRG.c ****   return (PWMTimerRG_TValueType)TPM_PDD_ReadCounterReg(TPM2_BASE_PTR);
 373              		.loc 1 348 0
 374 0008 024B     		ldr	r3, .L18
 375 000a 5B68     		ldr	r3, [r3, #4]
 349:../Generated_Code/PWMTimerRG.c **** }
 376              		.loc 1 349 0
 377 000c 181C     		mov	r0, r3
 378 000e BD46     		mov	sp, r7
 379 0010 02B0     		add	sp, sp, #8
 380              		@ sp needed for prologue
 381 0012 80BD     		pop	{r7, pc}
 382              	.L19:
 383              		.align	2
 384              	.L18:
 385 0014 00A00340 		.word	1073979392
 386              		.cfi_endproc
 387              	.LFE4:
 389              		.section	.text.PWMTimerRG_SetOffsetTicks,"ax",%progbits
 390              		.align	2
 391              		.global	PWMTimerRG_SetOffsetTicks
 392              		.code	16
 393              		.thumb_func
 395              	PWMTimerRG_SetOffsetTicks:
 396              	.LFB5:
 350:../Generated_Code/PWMTimerRG.c **** 
 351:../Generated_Code/PWMTimerRG.c **** /*
 352:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 353:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_SetOffsetTicks (component TimerUnit_LDD)
 354:../Generated_Code/PWMTimerRG.c **** */
 355:../Generated_Code/PWMTimerRG.c **** /*!
 356:../Generated_Code/PWMTimerRG.c **** **     @brief
 357:../Generated_Code/PWMTimerRG.c **** **         Sets the new offset value to channel specified by the
 358:../Generated_Code/PWMTimerRG.c **** **         parameter ChannelIdx. It is user responsibility to use value
 359:../Generated_Code/PWMTimerRG.c **** **         below selected period. This method is available when at
 360:../Generated_Code/PWMTimerRG.c **** **         least one channel is configured.
 361:../Generated_Code/PWMTimerRG.c **** **     @param
 362:../Generated_Code/PWMTimerRG.c **** **         DeviceDataPtr   - Device data structure
 363:../Generated_Code/PWMTimerRG.c **** **                           pointer returned by [Init] method.
 364:../Generated_Code/PWMTimerRG.c **** **     @param
 365:../Generated_Code/PWMTimerRG.c **** **         ChannelIdx      - Index of the component
 366:../Generated_Code/PWMTimerRG.c **** **                           channel.
 367:../Generated_Code/PWMTimerRG.c **** **     @param
 368:../Generated_Code/PWMTimerRG.c **** **         Ticks           - Number of counter ticks to compare
 369:../Generated_Code/PWMTimerRG.c **** **                           match.
 370:../Generated_Code/PWMTimerRG.c **** **     @return
 371:../Generated_Code/PWMTimerRG.c **** **                         - Error code, possible codes:
 372:../Generated_Code/PWMTimerRG.c **** **                           ERR_OK - OK 
 373:../Generated_Code/PWMTimerRG.c **** **                           ERR_PARAM_INDEX - ChannelIdx parameter is
 374:../Generated_Code/PWMTimerRG.c **** **                           out of possible range.
 375:../Generated_Code/PWMTimerRG.c **** **                           ERR_NOTAVAIL -  The compare mode is not
 376:../Generated_Code/PWMTimerRG.c **** **                           selected for selected channel
 377:../Generated_Code/PWMTimerRG.c **** **                           ERR_PARAM_TICKS - Ticks parameter is out of
 378:../Generated_Code/PWMTimerRG.c **** **                           possible range.
 379:../Generated_Code/PWMTimerRG.c **** **                           ERR_SPEED - The component does not work in
 380:../Generated_Code/PWMTimerRG.c **** **                           the active clock configuration
 381:../Generated_Code/PWMTimerRG.c **** */
 382:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 383:../Generated_Code/PWMTimerRG.c **** LDD_TError PWMTimerRG_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, PWMTimerRG
 384:../Generated_Code/PWMTimerRG.c **** {
 397              		.loc 1 384 0
 398              		.cfi_startproc
 399 0000 80B5     		push	{r7, lr}
 400              	.LCFI15:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404 0002 84B0     		sub	sp, sp, #16
 405              	.LCFI16:
 406              		.cfi_def_cfa_offset 24
 407 0004 00AF     		add	r7, sp, #0
 408              	.LCFI17:
 409              		.cfi_def_cfa_register 7
 410 0006 F860     		str	r0, [r7, #12]
 411 0008 7A60     		str	r2, [r7, #4]
 412 000a 3B1C     		mov	r3, r7
 413 000c 0B33     		add	r3, r3, #11
 414 000e 0A1C     		add	r2, r1, #0
 415 0010 1A70     		strb	r2, [r3]
 385:../Generated_Code/PWMTimerRG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 386:../Generated_Code/PWMTimerRG.c ****   /* Parameter test - this test can be disabled by setting the "Ignore range checking"
 387:../Generated_Code/PWMTimerRG.c ****      property to the "yes" value in the "Configuration inspector" */
 388:../Generated_Code/PWMTimerRG.c ****   if (ChannelIdx > LAST_CHANNEL) {     /* Is the channel index out of range? */
 416              		.loc 1 388 0
 417 0012 3B1C     		mov	r3, r7
 418 0014 0B33     		add	r3, r3, #11
 419 0016 1B78     		ldrb	r3, [r3]
 420 0018 012B     		cmp	r3, #1
 421 001a 01D9     		bls	.L21
 389:../Generated_Code/PWMTimerRG.c ****     return ERR_PARAM_INDEX;            /* If yes then error */
 422              		.loc 1 389 0
 423 001c 8223     		mov	r3, #130
 424 001e 1BE0     		b	.L22
 425              	.L21:
 390:../Generated_Code/PWMTimerRG.c ****   }
 391:../Generated_Code/PWMTimerRG.c ****   if ((ChannelMode[ChannelIdx]) != 0U) { /* Is the channel in compare mode? */
 426              		.loc 1 391 0
 427 0020 3B1C     		mov	r3, r7
 428 0022 0B33     		add	r3, r3, #11
 429 0024 1B78     		ldrb	r3, [r3]
 430 0026 0E4A     		ldr	r2, .L25
 431 0028 D35C     		ldrb	r3, [r2, r3]
 432 002a 002B     		cmp	r3, #0
 433 002c 01D0     		beq	.L23
 392:../Generated_Code/PWMTimerRG.c ****     return ERR_NOTAVAIL;               /* If not then error */
 434              		.loc 1 392 0
 435 002e 0923     		mov	r3, #9
 436 0030 12E0     		b	.L22
 437              	.L23:
 393:../Generated_Code/PWMTimerRG.c ****   }
 394:../Generated_Code/PWMTimerRG.c ****   TPM_PDD_WriteChannelValueReg(TPM2_BASE_PTR, ChannelDevice[ChannelIdx], (uint16_t)Ticks);
 438              		.loc 1 394 0
 439 0032 0C49     		ldr	r1, .L25+4
 440 0034 3B1C     		mov	r3, r7
 441 0036 0B33     		add	r3, r3, #11
 442 0038 1B78     		ldrb	r3, [r3]
 443 003a 0B4A     		ldr	r2, .L25+8
 444 003c D35C     		ldrb	r3, [r2, r3]
 445 003e 7A68     		ldr	r2, [r7, #4]
 446 0040 92B2     		uxth	r2, r2
 447 0042 0133     		add	r3, r3, #1
 448 0044 DB00     		lsl	r3, r3, #3
 449 0046 CB18     		add	r3, r1, r3
 450 0048 9A60     		str	r2, [r3, #8]
 395:../Generated_Code/PWMTimerRG.c ****   if (Ticks > 65535U) {                /* Was the given value greater than counter width? */
 451              		.loc 1 395 0
 452 004a 7A68     		ldr	r2, [r7, #4]
 453 004c 074B     		ldr	r3, .L25+12
 454 004e 9A42     		cmp	r2, r3
 455 0050 01D9     		bls	.L24
 396:../Generated_Code/PWMTimerRG.c ****     return ERR_PARAM_TICKS;            /* If yes then truncation of user data to 16 bits is reporte
 456              		.loc 1 396 0
 457 0052 9823     		mov	r3, #152
 458 0054 00E0     		b	.L22
 459              	.L24:
 397:../Generated_Code/PWMTimerRG.c ****   }
 398:../Generated_Code/PWMTimerRG.c ****   return ERR_OK;                       /* OK */
 460              		.loc 1 398 0
 461 0056 0023     		mov	r3, #0
 462              	.L22:
 399:../Generated_Code/PWMTimerRG.c **** }
 463              		.loc 1 399 0
 464 0058 181C     		mov	r0, r3
 465 005a BD46     		mov	sp, r7
 466 005c 04B0     		add	sp, sp, #16
 467              		@ sp needed for prologue
 468 005e 80BD     		pop	{r7, pc}
 469              	.L26:
 470              		.align	2
 471              	.L25:
 472 0060 00000000 		.word	ChannelMode
 473 0064 00A00340 		.word	1073979392
 474 0068 00000000 		.word	ChannelDevice
 475 006c FFFF0000 		.word	65535
 476              		.cfi_endproc
 477              	.LFE5:
 479              		.section	.text.PWMTimerRG_GetOffsetTicks,"ax",%progbits
 480              		.align	2
 481              		.global	PWMTimerRG_GetOffsetTicks
 482              		.code	16
 483              		.thumb_func
 485              	PWMTimerRG_GetOffsetTicks:
 486              	.LFB6:
 400:../Generated_Code/PWMTimerRG.c **** 
 401:../Generated_Code/PWMTimerRG.c **** /*
 402:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 403:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_GetOffsetTicks (component TimerUnit_LDD)
 404:../Generated_Code/PWMTimerRG.c **** */
 405:../Generated_Code/PWMTimerRG.c **** /*!
 406:../Generated_Code/PWMTimerRG.c **** **     @brief
 407:../Generated_Code/PWMTimerRG.c **** **         Returns the number of counter ticks to compare match channel
 408:../Generated_Code/PWMTimerRG.c **** **         specified by the parameter ChannelIdx. See also method
 409:../Generated_Code/PWMTimerRG.c **** **         [SetOffsetTicks]. This method is available when at least one
 410:../Generated_Code/PWMTimerRG.c **** **         channel is configured.
 411:../Generated_Code/PWMTimerRG.c **** **     @param
 412:../Generated_Code/PWMTimerRG.c **** **         DeviceDataPtr   - Device data structure
 413:../Generated_Code/PWMTimerRG.c **** **                           pointer returned by [Init] method.
 414:../Generated_Code/PWMTimerRG.c **** **     @param
 415:../Generated_Code/PWMTimerRG.c **** **         ChannelIdx      - Index of the component
 416:../Generated_Code/PWMTimerRG.c **** **                           channel.
 417:../Generated_Code/PWMTimerRG.c **** **     @param
 418:../Generated_Code/PWMTimerRG.c **** **         TicksPtr        - Pointer to return value of the
 419:../Generated_Code/PWMTimerRG.c **** **                           number of counter ticks to compare match.
 420:../Generated_Code/PWMTimerRG.c **** **     @return
 421:../Generated_Code/PWMTimerRG.c **** **                         - Error code, possible codes:
 422:../Generated_Code/PWMTimerRG.c **** **                           ERR_OK - OK 
 423:../Generated_Code/PWMTimerRG.c **** **                           ERR_PARAM_INDEX - ChannelIdx parameter is
 424:../Generated_Code/PWMTimerRG.c **** **                           out of possible range.
 425:../Generated_Code/PWMTimerRG.c **** **                           ERR_NOTAVAIL -  The compare mode is not
 426:../Generated_Code/PWMTimerRG.c **** **                           selected for selected channel.
 427:../Generated_Code/PWMTimerRG.c **** **                           ERR_SPEED - The component does not work in
 428:../Generated_Code/PWMTimerRG.c **** **                           the active clock configuration
 429:../Generated_Code/PWMTimerRG.c **** */
 430:../Generated_Code/PWMTimerRG.c **** /* ===================================================================*/
 431:../Generated_Code/PWMTimerRG.c **** LDD_TError PWMTimerRG_GetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, PWMTimerRG
 432:../Generated_Code/PWMTimerRG.c **** {
 487              		.loc 1 432 0
 488              		.cfi_startproc
 489 0000 80B5     		push	{r7, lr}
 490              	.LCFI18:
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 7, -8
 493              		.cfi_offset 14, -4
 494 0002 84B0     		sub	sp, sp, #16
 495              	.LCFI19:
 496              		.cfi_def_cfa_offset 24
 497 0004 00AF     		add	r7, sp, #0
 498              	.LCFI20:
 499              		.cfi_def_cfa_register 7
 500 0006 F860     		str	r0, [r7, #12]
 501 0008 7A60     		str	r2, [r7, #4]
 502 000a 3B1C     		mov	r3, r7
 503 000c 0B33     		add	r3, r3, #11
 504 000e 0A1C     		add	r2, r1, #0
 505 0010 1A70     		strb	r2, [r3]
 433:../Generated_Code/PWMTimerRG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 434:../Generated_Code/PWMTimerRG.c ****   /* Parameter test - this test can be disabled by setting the "Ignore range checking"
 435:../Generated_Code/PWMTimerRG.c ****      property to the "yes" value in the "Configuration inspector" */
 436:../Generated_Code/PWMTimerRG.c ****   if (ChannelIdx > LAST_CHANNEL) {     /* Is the channel index out of range? */
 506              		.loc 1 436 0
 507 0012 3B1C     		mov	r3, r7
 508 0014 0B33     		add	r3, r3, #11
 509 0016 1B78     		ldrb	r3, [r3]
 510 0018 012B     		cmp	r3, #1
 511 001a 01D9     		bls	.L28
 437:../Generated_Code/PWMTimerRG.c ****     return ERR_PARAM_INDEX;            /* If yes then error */
 512              		.loc 1 437 0
 513 001c 8223     		mov	r3, #130
 514 001e 15E0     		b	.L29
 515              	.L28:
 438:../Generated_Code/PWMTimerRG.c ****   }
 439:../Generated_Code/PWMTimerRG.c ****   if ((ChannelMode[ChannelIdx]) != 0U) { /* Is the channel in compare mode? */
 516              		.loc 1 439 0
 517 0020 3B1C     		mov	r3, r7
 518 0022 0B33     		add	r3, r3, #11
 519 0024 1B78     		ldrb	r3, [r3]
 520 0026 0B4A     		ldr	r2, .L31
 521 0028 D35C     		ldrb	r3, [r2, r3]
 522 002a 002B     		cmp	r3, #0
 523 002c 01D0     		beq	.L30
 440:../Generated_Code/PWMTimerRG.c ****     return ERR_NOTAVAIL;               /* If not then error */
 524              		.loc 1 440 0
 525 002e 0923     		mov	r3, #9
 526 0030 0CE0     		b	.L29
 527              	.L30:
 441:../Generated_Code/PWMTimerRG.c ****   }
 442:../Generated_Code/PWMTimerRG.c ****   *TicksPtr = (PWMTimerRG_TValueType)(TPM_PDD_ReadChannelValueReg(TPM2_BASE_PTR, ChannelDevice[Chan
 528              		.loc 1 442 0
 529 0032 094A     		ldr	r2, .L31+4
 530 0034 3B1C     		mov	r3, r7
 531 0036 0B33     		add	r3, r3, #11
 532 0038 1B78     		ldrb	r3, [r3]
 533 003a 0849     		ldr	r1, .L31+8
 534 003c CB5C     		ldrb	r3, [r1, r3]
 535 003e 0133     		add	r3, r3, #1
 536 0040 DB00     		lsl	r3, r3, #3
 537 0042 D318     		add	r3, r2, r3
 538 0044 9A68     		ldr	r2, [r3, #8]
 539 0046 7B68     		ldr	r3, [r7, #4]
 540 0048 1A60     		str	r2, [r3]
 443:../Generated_Code/PWMTimerRG.c ****   return ERR_OK;                       /* OK */
 541              		.loc 1 443 0
 542 004a 0023     		mov	r3, #0
 543              	.L29:
 444:../Generated_Code/PWMTimerRG.c **** }
 544              		.loc 1 444 0
 545 004c 181C     		mov	r0, r3
 546 004e BD46     		mov	sp, r7
 547 0050 04B0     		add	sp, sp, #16
 548              		@ sp needed for prologue
 549 0052 80BD     		pop	{r7, pc}
 550              	.L32:
 551              		.align	2
 552              	.L31:
 553 0054 00000000 		.word	ChannelMode
 554 0058 00A00340 		.word	1073979392
 555 005c 00000000 		.word	ChannelDevice
 556              		.cfi_endproc
 557              	.LFE6:
 559              		.section	.text.PWMTimerRG_Interrupt,"ax",%progbits
 560              		.align	2
 561              		.global	PWMTimerRG_Interrupt
 562              		.code	16
 563              		.thumb_func
 565              	PWMTimerRG_Interrupt:
 566              	.LFB7:
 445:../Generated_Code/PWMTimerRG.c **** 
 446:../Generated_Code/PWMTimerRG.c **** /*
 447:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 448:../Generated_Code/PWMTimerRG.c **** **     Method      :  PWMTimerRG_Interrupt (component TimerUnit_LDD)
 449:../Generated_Code/PWMTimerRG.c **** **
 450:../Generated_Code/PWMTimerRG.c **** **     Description :
 451:../Generated_Code/PWMTimerRG.c **** **         The method services the interrupt of the selected peripheral(s)
 452:../Generated_Code/PWMTimerRG.c **** **         and eventually invokes event(s) of the component.
 453:../Generated_Code/PWMTimerRG.c **** **         This method is internal. It is used by Processor Expert only.
 454:../Generated_Code/PWMTimerRG.c **** ** ===================================================================
 455:../Generated_Code/PWMTimerRG.c **** */
 456:../Generated_Code/PWMTimerRG.c **** PE_ISR(PWMTimerRG_Interrupt)
 457:../Generated_Code/PWMTimerRG.c **** {
 567              		.loc 1 457 0
 568              		.cfi_startproc
 569 0000 80B5     		push	{r7, lr}
 570              	.LCFI21:
 571              		.cfi_def_cfa_offset 8
 572              		.cfi_offset 7, -8
 573              		.cfi_offset 14, -4
 574 0002 82B0     		sub	sp, sp, #8
 575              	.LCFI22:
 576              		.cfi_def_cfa_offset 16
 577 0004 00AF     		add	r7, sp, #0
 578              	.LCFI23:
 579              		.cfi_def_cfa_register 7
 458:../Generated_Code/PWMTimerRG.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 459:../Generated_Code/PWMTimerRG.c ****   PWMTimerRG_TDeviceDataPtr DeviceDataPrv = INT_TPM2__DEFAULT_RTOS_ISRPARAM;
 580              		.loc 1 459 0
 581 0006 274B     		ldr	r3, .L38
 582 0008 1B68     		ldr	r3, [r3]
 583 000a 3B60     		str	r3, [r7]
 460:../Generated_Code/PWMTimerRG.c **** 
 461:../Generated_Code/PWMTimerRG.c ****   LDD_TEventMask State = 0U;
 584              		.loc 1 461 0
 585 000c 0023     		mov	r3, #0
 586 000e 7B60     		str	r3, [r7, #4]
 462:../Generated_Code/PWMTimerRG.c **** 
 463:../Generated_Code/PWMTimerRG.c ****   if ((TPM_PDD_GetOverflowInterruptFlag(TPM2_BASE_PTR)) != 0U) { /* Is the overflow interrupt flag 
 587              		.loc 1 463 0
 588 0010 254B     		ldr	r3, .L38+4
 589 0012 1A68     		ldr	r2, [r3]
 590 0014 8023     		mov	r3, #128
 591 0016 1340     		and	r3, r2
 592 0018 04D0     		beq	.L34
 464:../Generated_Code/PWMTimerRG.c ****     State |= LDD_TIMERUNIT_ON_COUNTER_RESTART; /* and set mask */
 593              		.loc 1 464 0
 594 001a 7B68     		ldr	r3, [r7, #4]
 595 001c 8022     		mov	r2, #128
 596 001e 5200     		lsl	r2, r2, #1
 597 0020 1343     		orr	r3, r2
 598 0022 7B60     		str	r3, [r7, #4]
 599              	.L34:
 465:../Generated_Code/PWMTimerRG.c ****   }
 466:../Generated_Code/PWMTimerRG.c ****   if ((TPM_PDD_GetChannelInterruptFlag(TPM2_BASE_PTR, ChannelDevice[0])) != 0U) { /* Is the channel
 600              		.loc 1 466 0
 601 0024 204A     		ldr	r2, .L38+4
 602 0026 214B     		ldr	r3, .L38+8
 603 0028 1B78     		ldrb	r3, [r3]
 604 002a 0133     		add	r3, r3, #1
 605 002c DB00     		lsl	r3, r3, #3
 606 002e D318     		add	r3, r2, r3
 607 0030 5A68     		ldr	r2, [r3, #4]
 608 0032 8023     		mov	r3, #128
 609 0034 1340     		and	r3, r2
 610 0036 03D0     		beq	.L35
 467:../Generated_Code/PWMTimerRG.c ****     State |= LDD_TIMERUNIT_ON_CHANNEL_0; /* and set mask */
 611              		.loc 1 467 0
 612 0038 7B68     		ldr	r3, [r7, #4]
 613 003a 0122     		mov	r2, #1
 614 003c 1343     		orr	r3, r2
 615 003e 7B60     		str	r3, [r7, #4]
 616              	.L35:
 468:../Generated_Code/PWMTimerRG.c ****   }
 469:../Generated_Code/PWMTimerRG.c ****   State &= DeviceDataPrv->EnEvents;    /* Handle only enabled interrupts */
 617              		.loc 1 469 0
 618 0040 3B68     		ldr	r3, [r7]
 619 0042 1A68     		ldr	r2, [r3]
 620 0044 7B68     		ldr	r3, [r7, #4]
 621 0046 1340     		and	r3, r2
 622 0048 7B60     		str	r3, [r7, #4]
 470:../Generated_Code/PWMTimerRG.c ****   if (State & LDD_TIMERUNIT_ON_COUNTER_RESTART) { /* Is the overflow interrupt flag pending? */
 623              		.loc 1 470 0
 624 004a 7A68     		ldr	r2, [r7, #4]
 625 004c 8023     		mov	r3, #128
 626 004e 5B00     		lsl	r3, r3, #1
 627 0050 1340     		and	r3, r2
 628 0052 0AD0     		beq	.L36
 471:../Generated_Code/PWMTimerRG.c ****     TPM_PDD_ClearOverflowInterruptFlag(TPM2_BASE_PTR); /* Clear flag */
 629              		.loc 1 471 0
 630 0054 144B     		ldr	r3, .L38+4
 631 0056 144A     		ldr	r2, .L38+4
 632 0058 1268     		ldr	r2, [r2]
 633 005a 8021     		mov	r1, #128
 634 005c 0A43     		orr	r2, r1
 635 005e 1A60     		str	r2, [r3]
 472:../Generated_Code/PWMTimerRG.c ****     PWMTimerRG_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
 636              		.loc 1 472 0
 637 0060 3B68     		ldr	r3, [r7]
 638 0062 9B68     		ldr	r3, [r3, #8]
 639 0064 181C     		mov	r0, r3
 640 0066 FFF7FEFF 		bl	PWMTimerRG_OnCounterRestart
 641              	.L36:
 473:../Generated_Code/PWMTimerRG.c ****   }
 474:../Generated_Code/PWMTimerRG.c ****   if (State & LDD_TIMERUNIT_ON_CHANNEL_0) { /* Is the channel 0 interrupt flag pending? */
 642              		.loc 1 474 0
 643 006a 7A68     		ldr	r2, [r7, #4]
 644 006c 0123     		mov	r3, #1
 645 006e 1340     		and	r3, r2
 646 0070 15D0     		beq	.L33
 475:../Generated_Code/PWMTimerRG.c ****     TPM_PDD_ClearChannelInterruptFlag(TPM2_BASE_PTR, ChannelDevice[0]); /* Clear flag */
 647              		.loc 1 475 0
 648 0072 0D49     		ldr	r1, .L38+4
 649 0074 0D4B     		ldr	r3, .L38+8
 650 0076 1B78     		ldrb	r3, [r3]
 651 0078 181C     		mov	r0, r3
 652 007a 0B4A     		ldr	r2, .L38+4
 653 007c 0B4B     		ldr	r3, .L38+8
 654 007e 1B78     		ldrb	r3, [r3]
 655 0080 0133     		add	r3, r3, #1
 656 0082 DB00     		lsl	r3, r3, #3
 657 0084 D318     		add	r3, r2, r3
 658 0086 5B68     		ldr	r3, [r3, #4]
 659 0088 8022     		mov	r2, #128
 660 008a 1A43     		orr	r2, r3
 661 008c 431C     		add	r3, r0, #1
 662 008e DB00     		lsl	r3, r3, #3
 663 0090 CB18     		add	r3, r1, r3
 664 0092 5A60     		str	r2, [r3, #4]
 476:../Generated_Code/PWMTimerRG.c ****     PWMTimerRG_OnChannel0(DeviceDataPrv->UserDataPtr); /* Invoke OnChannel0 event */
 665              		.loc 1 476 0
 666 0094 3B68     		ldr	r3, [r7]
 667 0096 9B68     		ldr	r3, [r3, #8]
 668 0098 181C     		mov	r0, r3
 669 009a FFF7FEFF 		bl	PWMTimerRG_OnChannel0
 670              	.L33:
 477:../Generated_Code/PWMTimerRG.c ****   }
 478:../Generated_Code/PWMTimerRG.c **** }
 671              		.loc 1 478 0
 672 009e BD46     		mov	sp, r7
 673 00a0 02B0     		add	sp, sp, #8
 674              		@ sp needed for prologue
 675 00a2 80BD     		pop	{r7, pc}
 676              	.L39:
 677              		.align	2
 678              	.L38:
 679 00a4 00000000 		.word	INT_TPM2__DEFAULT_RTOS_ISRPARAM
 680 00a8 00A00340 		.word	1073979392
 681 00ac 00000000 		.word	ChannelDevice
 682              		.cfi_endproc
 683              	.LFE7:
 685              		.text
 686              	.Letext0:
 687              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 688              		.file 3 "C:/Users/SAE_LP1/workspace/InjBoard/Generated_Code/PE_Types.h"
 689              		.file 4 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 690              		.file 5 "C:/Users/SAE_LP1/workspace/InjBoard/Generated_Code/PWMTimerRG.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PWMTimerRG.c
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:18     .rodata.ChannelDevice:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:21     .rodata.ChannelDevice:00000000 ChannelDevice
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:25     .rodata.ChannelMode:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:28     .rodata.ChannelMode:00000000 ChannelMode
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:31     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:34     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:37     .bss.INT_TPM2__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:40     .bss.INT_TPM2__DEFAULT_RTOS_ISRPARAM:00000000 INT_TPM2__DEFAULT_RTOS_ISRPARAM
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:43     .text.PWMTimerRG_Init:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:48     .text.PWMTimerRG_Init:00000000 PWMTimerRG_Init
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:191    .text.PWMTimerRG_Init:000000d0 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:207    .text.PWMTimerRG_Deinit:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:212    .text.PWMTimerRG_Deinit:00000000 PWMTimerRG_Deinit
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:250    .text.PWMTimerRG_Deinit:00000024 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:256    .text.PWMTimerRG_Enable:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:261    .text.PWMTimerRG_Enable:00000000 PWMTimerRG_Enable
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:303    .text.PWMTimerRG_Enable:0000002c $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:308    .text.PWMTimerRG_Disable:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:313    .text.PWMTimerRG_Disable:00000000 PWMTimerRG_Disable
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:347    .text.PWMTimerRG_Disable:00000020 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:352    .text.PWMTimerRG_GetCounterValue:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:357    .text.PWMTimerRG_GetCounterValue:00000000 PWMTimerRG_GetCounterValue
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:385    .text.PWMTimerRG_GetCounterValue:00000014 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:390    .text.PWMTimerRG_SetOffsetTicks:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:395    .text.PWMTimerRG_SetOffsetTicks:00000000 PWMTimerRG_SetOffsetTicks
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:472    .text.PWMTimerRG_SetOffsetTicks:00000060 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:480    .text.PWMTimerRG_GetOffsetTicks:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:485    .text.PWMTimerRG_GetOffsetTicks:00000000 PWMTimerRG_GetOffsetTicks
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:553    .text.PWMTimerRG_GetOffsetTicks:00000054 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:560    .text.PWMTimerRG_Interrupt:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:565    .text.PWMTimerRG_Interrupt:00000000 PWMTimerRG_Interrupt
C:\Users\SAE_LP1\AppData\Local\Temp\ccyHJdkl.s:679    .text.PWMTimerRG_Interrupt:000000a4 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.aba60cd3b17efbc2d56a1d9fc6f583a6
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.03d7426d632bb1a35ec1708754c41daf
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.2dd306b0ccbe86124098bfe3a0b58d88
                           .group:00000000 wm4.ansi_parms.h.64.05090287ebda70c0d79c02b050dca090
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.cstdint.137.268b37259d2d366c21376cbd280e10d7
                           .group:00000000 wm4.PE_Types.h.69.eb46a2923bf0a98db7ccd63de03703a1
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.61.443ca05468cb0c6bf080e06394e39146
                           .group:00000000 wm4.MKL25Z4.h.61.adbdc31ae5ef570825ab0667cccdf447
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.TPM_PDD.h.47.938deaa7335b1be1e86f1f3ea98af3d6
                           .group:00000000 wm4.Cpu.h.64.f81ea9fa0d5dd4235933d360f41084fe
                           .group:00000000 wm4.PWMTimerRG.h.145.43292b994134431096d489cc8ad25e0b
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.va_list.h.9.b0bb078841c0305c2667a31da10a9070
                           .group:00000000 wm4.file_struc.h.13.79700b909bfbc91e5b3cffa0100f62cf
                           .group:00000000 wm4.stdarg.ARM.h.9.32516e68edcca81ab31f48f233894821
                           .group:00000000 wm4.stdio_api.h.71.3b2f2f9a22fa2b89114b19a43e47537d
                           .group:00000000 wm4.cstdio.1186.6c7f5c80aaa542dbe41dde866b3043d9
                           .group:00000000 wm4.IO1.h.110.f91ec9d4f1f664c788709811298054d8
                           .group:00000000 wm4.SPI_PDD.h.9.e4b4750c93f1f659043d2457a4cc95a6
                           .group:00000000 wm4.SPI.h.133.ebf88e2f44f34088fd559df94ff085f7
                           .group:00000000 wm4.GPIO_PDD.h.9.194cb77f647f40e9013b4c76617a0f52
                           .group:00000000 wm4.PORT_PDD.h.9.e24435d4c3cbcc67beceb9e359966485
                           .group:00000000 wm4.SPIO.h.115.4aa61cdf57e3ce02c8471e878bd2249b
                           .group:00000000 wm4.GPIO1.h.102.0c6f30aac87db5bf3dfd0d28f5edf4cc

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
PWMTimerRG_OnCounterRestart
PWMTimerRG_OnChannel0
