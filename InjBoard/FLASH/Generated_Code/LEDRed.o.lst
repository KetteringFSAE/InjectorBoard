   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"LEDRed.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	4
  23              		.section	.text.LEDRed_Init,"ax",%progbits
  24              		.align	2
  25              		.global	LEDRed_Init
  26              		.code	16
  27              		.thumb_func
  29              	LEDRed_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/LEDRed.c"
   1:../Generated_Code/LEDRed.c **** /* ###################################################################
   2:../Generated_Code/LEDRed.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/LEDRed.c **** **     Filename    : LEDRed.c
   4:../Generated_Code/LEDRed.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/LEDRed.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/LEDRed.c **** **     Component   : BitIO_LDD
   7:../Generated_Code/LEDRed.c **** **     Version     : Component 01.033, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/LEDRed.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/LEDRed.c **** **     Date/Time   : 2017-02-22, 20:40, # CodeGen: 26
  10:../Generated_Code/LEDRed.c **** **     Abstract    :
  11:../Generated_Code/LEDRed.c **** **         The HAL BitIO component provides a low level API for unified
  12:../Generated_Code/LEDRed.c **** **         access to general purpose digital input/output pins across
  13:../Generated_Code/LEDRed.c **** **         various device designs.
  14:../Generated_Code/LEDRed.c **** **
  15:../Generated_Code/LEDRed.c **** **         RTOS drivers using HAL BitIO API are simpler and more
  16:../Generated_Code/LEDRed.c **** **         portable to various microprocessors.
  17:../Generated_Code/LEDRed.c **** **     Settings    :
  18:../Generated_Code/LEDRed.c **** **          Component name                                 : LEDRed
  19:../Generated_Code/LEDRed.c **** **          Pin for I/O                                    : TSI0_CH11/PTB18/TPM2_CH0
  20:../Generated_Code/LEDRed.c **** **          Pin signal                                     : 
  21:../Generated_Code/LEDRed.c **** **          Direction                                      : Output
  22:../Generated_Code/LEDRed.c **** **          Initialization                                 : 
  23:../Generated_Code/LEDRed.c **** **            Init. direction                              : Output
  24:../Generated_Code/LEDRed.c **** **            Init. value                                  : 1
  25:../Generated_Code/LEDRed.c **** **            Auto initialization                          : yes
  26:../Generated_Code/LEDRed.c **** **          Safe mode                                      : no
  27:../Generated_Code/LEDRed.c **** **     Contents    :
  28:../Generated_Code/LEDRed.c **** **         Init   - LDD_TDeviceData* LEDRed_Init(LDD_TUserData *UserDataPtr);
  29:../Generated_Code/LEDRed.c **** **         PutVal - void LEDRed_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val);
  30:../Generated_Code/LEDRed.c **** **         ClrVal - void LEDRed_ClrVal(LDD_TDeviceData *DeviceDataPtr);
  31:../Generated_Code/LEDRed.c **** **         SetVal - void LEDRed_SetVal(LDD_TDeviceData *DeviceDataPtr);
  32:../Generated_Code/LEDRed.c **** **
  33:../Generated_Code/LEDRed.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  34:../Generated_Code/LEDRed.c **** **     All Rights Reserved.
  35:../Generated_Code/LEDRed.c **** **     
  36:../Generated_Code/LEDRed.c **** **     Redistribution and use in source and binary forms, with or without modification,
  37:../Generated_Code/LEDRed.c **** **     are permitted provided that the following conditions are met:
  38:../Generated_Code/LEDRed.c **** **     
  39:../Generated_Code/LEDRed.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  40:../Generated_Code/LEDRed.c **** **       of conditions and the following disclaimer.
  41:../Generated_Code/LEDRed.c **** **     
  42:../Generated_Code/LEDRed.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  43:../Generated_Code/LEDRed.c **** **       list of conditions and the following disclaimer in the documentation and/or
  44:../Generated_Code/LEDRed.c **** **       other materials provided with the distribution.
  45:../Generated_Code/LEDRed.c **** **     
  46:../Generated_Code/LEDRed.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  47:../Generated_Code/LEDRed.c **** **       contributors may be used to endorse or promote products derived from this
  48:../Generated_Code/LEDRed.c **** **       software without specific prior written permission.
  49:../Generated_Code/LEDRed.c **** **     
  50:../Generated_Code/LEDRed.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  51:../Generated_Code/LEDRed.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  52:../Generated_Code/LEDRed.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  53:../Generated_Code/LEDRed.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  54:../Generated_Code/LEDRed.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  55:../Generated_Code/LEDRed.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  56:../Generated_Code/LEDRed.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  57:../Generated_Code/LEDRed.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  58:../Generated_Code/LEDRed.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  59:../Generated_Code/LEDRed.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  60:../Generated_Code/LEDRed.c **** **     
  61:../Generated_Code/LEDRed.c **** **     http: www.freescale.com
  62:../Generated_Code/LEDRed.c **** **     mail: support@freescale.com
  63:../Generated_Code/LEDRed.c **** ** ###################################################################*/
  64:../Generated_Code/LEDRed.c **** /*!
  65:../Generated_Code/LEDRed.c **** ** @file LEDRed.c
  66:../Generated_Code/LEDRed.c **** ** @version 01.03
  67:../Generated_Code/LEDRed.c **** ** @brief
  68:../Generated_Code/LEDRed.c **** **         The HAL BitIO component provides a low level API for unified
  69:../Generated_Code/LEDRed.c **** **         access to general purpose digital input/output pins across
  70:../Generated_Code/LEDRed.c **** **         various device designs.
  71:../Generated_Code/LEDRed.c **** **
  72:../Generated_Code/LEDRed.c **** **         RTOS drivers using HAL BitIO API are simpler and more
  73:../Generated_Code/LEDRed.c **** **         portable to various microprocessors.
  74:../Generated_Code/LEDRed.c **** */         
  75:../Generated_Code/LEDRed.c **** /*!
  76:../Generated_Code/LEDRed.c **** **  @addtogroup LEDRed_module LEDRed module documentation
  77:../Generated_Code/LEDRed.c **** **  @{
  78:../Generated_Code/LEDRed.c **** */         
  79:../Generated_Code/LEDRed.c **** 
  80:../Generated_Code/LEDRed.c **** /* MODULE LEDRed. */
  81:../Generated_Code/LEDRed.c **** 
  82:../Generated_Code/LEDRed.c **** /* {Default RTOS Adapter} No RTOS includes */
  83:../Generated_Code/LEDRed.c **** #include "LEDRed.h"
  84:../Generated_Code/LEDRed.c **** 
  85:../Generated_Code/LEDRed.c **** #ifdef __cplusplus
  86:../Generated_Code/LEDRed.c **** extern "C" {
  87:../Generated_Code/LEDRed.c **** #endif 
  88:../Generated_Code/LEDRed.c **** 
  89:../Generated_Code/LEDRed.c **** typedef struct {
  90:../Generated_Code/LEDRed.c ****   LDD_TUserData *UserDataPtr;          /* Pointer to user data */
  91:../Generated_Code/LEDRed.c **** } LEDRed_TDeviceData;                  /* Device data structure type */
  92:../Generated_Code/LEDRed.c **** 
  93:../Generated_Code/LEDRed.c **** typedef LEDRed_TDeviceData *LEDRed_TDeviceDataPtr ; /* Pointer to the device data structure. */
  94:../Generated_Code/LEDRed.c **** 
  95:../Generated_Code/LEDRed.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  96:../Generated_Code/LEDRed.c **** static LEDRed_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  97:../Generated_Code/LEDRed.c **** /*
  98:../Generated_Code/LEDRed.c **** ** ===================================================================
  99:../Generated_Code/LEDRed.c **** **     Method      :  LEDRed_Init (component BitIO_LDD)
 100:../Generated_Code/LEDRed.c **** */
 101:../Generated_Code/LEDRed.c **** /*!
 102:../Generated_Code/LEDRed.c **** **     @brief
 103:../Generated_Code/LEDRed.c **** **         Initializes the device. Allocates memory for the device data
 104:../Generated_Code/LEDRed.c **** **         structure, allocates interrupt vectors and sets interrupt
 105:../Generated_Code/LEDRed.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 106:../Generated_Code/LEDRed.c **** **         in init. code" is set to "yes" value then the device is also
 107:../Generated_Code/LEDRed.c **** **         enabled(see the description of the Enable() method). In this
 108:../Generated_Code/LEDRed.c **** **         case the Enable() method is not necessary and needn't to be
 109:../Generated_Code/LEDRed.c **** **         generated. 
 110:../Generated_Code/LEDRed.c **** **     @param
 111:../Generated_Code/LEDRed.c **** **         UserDataPtr     - Pointer to the user or
 112:../Generated_Code/LEDRed.c **** **                           RTOS specific data. This pointer will be
 113:../Generated_Code/LEDRed.c **** **                           passed as an event or callback parameter.
 114:../Generated_Code/LEDRed.c **** **     @return
 115:../Generated_Code/LEDRed.c **** **                         - Pointer to the dynamically allocated private
 116:../Generated_Code/LEDRed.c **** **                           structure or NULL if there was an error.
 117:../Generated_Code/LEDRed.c **** */
 118:../Generated_Code/LEDRed.c **** /* ===================================================================*/
 119:../Generated_Code/LEDRed.c **** LDD_TDeviceData* LEDRed_Init(LDD_TUserData *UserDataPtr)
 120:../Generated_Code/LEDRed.c **** {
  32              		.loc 1 120 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 121:../Generated_Code/LEDRed.c ****   /* Allocate device structure */
 122:../Generated_Code/LEDRed.c ****   LEDRed_TDeviceDataPtr DeviceDataPrv;
 123:../Generated_Code/LEDRed.c **** 
 124:../Generated_Code/LEDRed.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 125:../Generated_Code/LEDRed.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 125 0
  47 0008 114B     		ldr	r3, .L3
  48 000a FB60     		str	r3, [r7, #12]
 126:../Generated_Code/LEDRed.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  49              		.loc 1 126 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 7A68     		ldr	r2, [r7, #4]
  52 0010 1A60     		str	r2, [r3]
 127:../Generated_Code/LEDRed.c ****   /* Configure pin as output */
 128:../Generated_Code/LEDRed.c ****   /* GPIOB_PDDR: PDD|=0x00040000 */
 129:../Generated_Code/LEDRed.c ****   GPIOB_PDDR |= GPIO_PDDR_PDD(0x00040000);
  53              		.loc 1 129 0
  54 0012 104B     		ldr	r3, .L3+4
  55 0014 0F4A     		ldr	r2, .L3+4
  56 0016 5269     		ldr	r2, [r2, #20]
  57 0018 8021     		mov	r1, #128
  58 001a C902     		lsl	r1, r1, #11
  59 001c 0A43     		orr	r2, r1
  60 001e 5A61     		str	r2, [r3, #20]
 130:../Generated_Code/LEDRed.c ****   /* Set initialization value */
 131:../Generated_Code/LEDRed.c ****   /* GPIOB_PDOR: PDO|=0x00040000 */
 132:../Generated_Code/LEDRed.c ****   GPIOB_PDOR |= GPIO_PDOR_PDO(0x00040000);
  61              		.loc 1 132 0
  62 0020 0C4B     		ldr	r3, .L3+4
  63 0022 0C4A     		ldr	r2, .L3+4
  64 0024 1268     		ldr	r2, [r2]
  65 0026 8021     		mov	r1, #128
  66 0028 C902     		lsl	r1, r1, #11
  67 002a 0A43     		orr	r2, r1
  68 002c 1A60     		str	r2, [r3]
 133:../Generated_Code/LEDRed.c ****   /* Initialization of Port Control register */
 134:../Generated_Code/LEDRed.c ****   /* PORTB_PCR18: ISF=0,MUX=1 */
 135:../Generated_Code/LEDRed.c ****   PORTB_PCR18 = (uint32_t)((PORTB_PCR18 & (uint32_t)~(uint32_t)(
  69              		.loc 1 135 0
  70 002e 0A4B     		ldr	r3, .L3+8
  71 0030 094A     		ldr	r2, .L3+8
  72 0032 916C     		ldr	r1, [r2, #72]
  73 0034 094A     		ldr	r2, .L3+12
  74 0036 0A40     		and	r2, r1
  75 0038 8021     		mov	r1, #128
  76 003a 4900     		lsl	r1, r1, #1
  77 003c 0A43     		orr	r2, r1
  78 003e 9A64     		str	r2, [r3, #72]
 136:../Generated_Code/LEDRed.c ****                  PORT_PCR_ISF_MASK |
 137:../Generated_Code/LEDRed.c ****                  PORT_PCR_MUX(0x06)
 138:../Generated_Code/LEDRed.c ****                 )) | (uint32_t)(
 139:../Generated_Code/LEDRed.c ****                  PORT_PCR_MUX(0x01)
 140:../Generated_Code/LEDRed.c ****                 ));
 141:../Generated_Code/LEDRed.c ****   /* Registration of the device structure */
 142:../Generated_Code/LEDRed.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LEDRed_ID,DeviceDataPrv);
  79              		.loc 1 142 0
  80 0040 074B     		ldr	r3, .L3+16
  81 0042 FA68     		ldr	r2, [r7, #12]
  82 0044 1A61     		str	r2, [r3, #16]
 143:../Generated_Code/LEDRed.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
  83              		.loc 1 143 0
  84 0046 FB68     		ldr	r3, [r7, #12]
 144:../Generated_Code/LEDRed.c **** }
  85              		.loc 1 144 0
  86 0048 181C     		mov	r0, r3
  87 004a BD46     		mov	sp, r7
  88 004c 04B0     		add	sp, sp, #16
  89              		@ sp needed for prologue
  90 004e 80BD     		pop	{r7, pc}
  91              	.L4:
  92              		.align	2
  93              	.L3:
  94 0050 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  95 0054 40F00F40 		.word	1074786368
  96 0058 00A00440 		.word	1074044928
  97 005c FFF8FFFE 		.word	-16779009
  98 0060 00000000 		.word	PE_LDD_DeviceDataList
  99              		.cfi_endproc
 100              	.LFE0:
 102              		.section	.text.LEDRed_PutVal,"ax",%progbits
 103              		.align	2
 104              		.global	LEDRed_PutVal
 105              		.code	16
 106              		.thumb_func
 108              	LEDRed_PutVal:
 109              	.LFB1:
 145:../Generated_Code/LEDRed.c **** /*
 146:../Generated_Code/LEDRed.c **** ** ===================================================================
 147:../Generated_Code/LEDRed.c **** **     Method      :  LEDRed_PutVal (component BitIO_LDD)
 148:../Generated_Code/LEDRed.c **** */
 149:../Generated_Code/LEDRed.c **** /*!
 150:../Generated_Code/LEDRed.c **** **     @brief
 151:../Generated_Code/LEDRed.c **** **         The specified output value is set. If the direction is <b>
 152:../Generated_Code/LEDRed.c **** **         input</b>, the component saves the value to a memory or a
 153:../Generated_Code/LEDRed.c **** **         register and this value will be written to the pin after
 154:../Generated_Code/LEDRed.c **** **         switching to the output mode (using <tt>SetDir(TRUE)</tt>;
 155:../Generated_Code/LEDRed.c **** **         see <a href="BitIOProperties.html#SafeMode">Safe mode</a>
 156:../Generated_Code/LEDRed.c **** **         property for limitations). If the direction is <b>output</b>,
 157:../Generated_Code/LEDRed.c **** **         it writes the value to the pin. (Method is available only if
 158:../Generated_Code/LEDRed.c **** **         the direction = <u><tt>output</tt></u> or <u><tt>
 159:../Generated_Code/LEDRed.c **** **         input/output</tt></u>).
 160:../Generated_Code/LEDRed.c **** **     @param
 161:../Generated_Code/LEDRed.c **** **         DeviceDataPtr   - Device data structure
 162:../Generated_Code/LEDRed.c **** **                           pointer returned by <Init> method.
 163:../Generated_Code/LEDRed.c **** **     @param
 164:../Generated_Code/LEDRed.c **** **         Val             - Output value. Possible values:
 165:../Generated_Code/LEDRed.c **** **                           <false> - logical "0" (Low level)
 166:../Generated_Code/LEDRed.c **** **                           <true> - logical "1" (High level)
 167:../Generated_Code/LEDRed.c **** */
 168:../Generated_Code/LEDRed.c **** /* ===================================================================*/
 169:../Generated_Code/LEDRed.c **** void LEDRed_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val)
 170:../Generated_Code/LEDRed.c **** {
 110              		.loc 1 170 0
 111              		.cfi_startproc
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 82B0     		sub	sp, sp, #8
 118              	.LCFI4:
 119              		.cfi_def_cfa_offset 16
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI5:
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
 124 0008 0A1C     		mov	r2, r1
 125 000a FB1C     		add	r3, r7, #3
 126 000c 1A70     		strb	r2, [r3]
 171:../Generated_Code/LEDRed.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 172:../Generated_Code/LEDRed.c ****   if (Val) {
 127              		.loc 1 172 0
 128 000e FB1C     		add	r3, r7, #3
 129 0010 1B78     		ldrb	r3, [r3]
 130 0012 002B     		cmp	r3, #0
 131 0014 04D0     		beq	.L6
 173:../Generated_Code/LEDRed.c ****     GPIO_PDD_SetPortDataOutputMask(LEDRed_MODULE_BASE_ADDRESS, LEDRed_PORT_MASK);
 132              		.loc 1 173 0
 133 0016 064B     		ldr	r3, .L8
 134 0018 8022     		mov	r2, #128
 135 001a D202     		lsl	r2, r2, #11
 136 001c 5A60     		str	r2, [r3, #4]
 137 001e 03E0     		b	.L5
 138              	.L6:
 174:../Generated_Code/LEDRed.c ****   } else { /* !Val */
 175:../Generated_Code/LEDRed.c ****     GPIO_PDD_ClearPortDataOutputMask(LEDRed_MODULE_BASE_ADDRESS, LEDRed_PORT_MASK);
 139              		.loc 1 175 0
 140 0020 034B     		ldr	r3, .L8
 141 0022 8022     		mov	r2, #128
 142 0024 D202     		lsl	r2, r2, #11
 143 0026 9A60     		str	r2, [r3, #8]
 144              	.L5:
 176:../Generated_Code/LEDRed.c ****   } /* !Val */
 177:../Generated_Code/LEDRed.c **** }
 145              		.loc 1 177 0
 146 0028 BD46     		mov	sp, r7
 147 002a 02B0     		add	sp, sp, #8
 148              		@ sp needed for prologue
 149 002c 80BD     		pop	{r7, pc}
 150              	.L9:
 151 002e C046     		.align	2
 152              	.L8:
 153 0030 40F00FF8 		.word	-133173184
 154              		.cfi_endproc
 155              	.LFE1:
 157              		.section	.text.LEDRed_ClrVal,"ax",%progbits
 158              		.align	2
 159              		.global	LEDRed_ClrVal
 160              		.code	16
 161              		.thumb_func
 163              	LEDRed_ClrVal:
 164              	.LFB2:
 178:../Generated_Code/LEDRed.c **** 
 179:../Generated_Code/LEDRed.c **** /*
 180:../Generated_Code/LEDRed.c **** ** ===================================================================
 181:../Generated_Code/LEDRed.c **** **     Method      :  LEDRed_ClrVal (component BitIO_LDD)
 182:../Generated_Code/LEDRed.c **** */
 183:../Generated_Code/LEDRed.c **** /*!
 184:../Generated_Code/LEDRed.c **** **     @brief
 185:../Generated_Code/LEDRed.c **** **         Clears (set to zero) the output value. It is equivalent to
 186:../Generated_Code/LEDRed.c **** **         the [PutVal(FALSE)]. This method is available only if the
 187:../Generated_Code/LEDRed.c **** **         direction = _[output]_ or _[input/output]_.
 188:../Generated_Code/LEDRed.c **** **     @param
 189:../Generated_Code/LEDRed.c **** **         DeviceDataPtr   - Pointer to device data
 190:../Generated_Code/LEDRed.c **** **                           structure returned by <Init> method.
 191:../Generated_Code/LEDRed.c **** */
 192:../Generated_Code/LEDRed.c **** /* ===================================================================*/
 193:../Generated_Code/LEDRed.c **** void LEDRed_ClrVal(LDD_TDeviceData *DeviceDataPtr)
 194:../Generated_Code/LEDRed.c **** {
 165              		.loc 1 194 0
 166              		.cfi_startproc
 167 0000 80B5     		push	{r7, lr}
 168              	.LCFI6:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 82B0     		sub	sp, sp, #8
 173              	.LCFI7:
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              	.LCFI8:
 177              		.cfi_def_cfa_register 7
 178 0006 7860     		str	r0, [r7, #4]
 195:../Generated_Code/LEDRed.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 196:../Generated_Code/LEDRed.c ****   GPIO_PDD_ClearPortDataOutputMask(LEDRed_MODULE_BASE_ADDRESS, LEDRed_PORT_MASK);
 179              		.loc 1 196 0
 180 0008 034B     		ldr	r3, .L11
 181 000a 8022     		mov	r2, #128
 182 000c D202     		lsl	r2, r2, #11
 183 000e 9A60     		str	r2, [r3, #8]
 197:../Generated_Code/LEDRed.c **** }
 184              		.loc 1 197 0
 185 0010 BD46     		mov	sp, r7
 186 0012 02B0     		add	sp, sp, #8
 187              		@ sp needed for prologue
 188 0014 80BD     		pop	{r7, pc}
 189              	.L12:
 190 0016 C046     		.align	2
 191              	.L11:
 192 0018 40F00FF8 		.word	-133173184
 193              		.cfi_endproc
 194              	.LFE2:
 196              		.section	.text.LEDRed_SetVal,"ax",%progbits
 197              		.align	2
 198              		.global	LEDRed_SetVal
 199              		.code	16
 200              		.thumb_func
 202              	LEDRed_SetVal:
 203              	.LFB3:
 198:../Generated_Code/LEDRed.c **** 
 199:../Generated_Code/LEDRed.c **** /*
 200:../Generated_Code/LEDRed.c **** ** ===================================================================
 201:../Generated_Code/LEDRed.c **** **     Method      :  LEDRed_SetVal (component BitIO_LDD)
 202:../Generated_Code/LEDRed.c **** */
 203:../Generated_Code/LEDRed.c **** /*!
 204:../Generated_Code/LEDRed.c **** **     @brief
 205:../Generated_Code/LEDRed.c **** **         Sets (to one) the output value. It is equivalent to the
 206:../Generated_Code/LEDRed.c **** **         [PutVal(TRUE)]. This method is available only if the
 207:../Generated_Code/LEDRed.c **** **         direction = _[output]_ or _[input/output]_.
 208:../Generated_Code/LEDRed.c **** **     @param
 209:../Generated_Code/LEDRed.c **** **         DeviceDataPtr   - Pointer to device data
 210:../Generated_Code/LEDRed.c **** **                           structure returned by <Init> method.
 211:../Generated_Code/LEDRed.c **** */
 212:../Generated_Code/LEDRed.c **** /* ===================================================================*/
 213:../Generated_Code/LEDRed.c **** void LEDRed_SetVal(LDD_TDeviceData *DeviceDataPtr)
 214:../Generated_Code/LEDRed.c **** {
 204              		.loc 1 214 0
 205              		.cfi_startproc
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI9:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 82B0     		sub	sp, sp, #8
 212              	.LCFI10:
 213              		.cfi_def_cfa_offset 16
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI11:
 216              		.cfi_def_cfa_register 7
 217 0006 7860     		str	r0, [r7, #4]
 215:../Generated_Code/LEDRed.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 216:../Generated_Code/LEDRed.c ****   GPIO_PDD_SetPortDataOutputMask(LEDRed_MODULE_BASE_ADDRESS, LEDRed_PORT_MASK);
 218              		.loc 1 216 0
 219 0008 034B     		ldr	r3, .L14
 220 000a 8022     		mov	r2, #128
 221 000c D202     		lsl	r2, r2, #11
 222 000e 5A60     		str	r2, [r3, #4]
 217:../Generated_Code/LEDRed.c **** }
 223              		.loc 1 217 0
 224 0010 BD46     		mov	sp, r7
 225 0012 02B0     		add	sp, sp, #8
 226              		@ sp needed for prologue
 227 0014 80BD     		pop	{r7, pc}
 228              	.L15:
 229 0016 C046     		.align	2
 230              	.L14:
 231 0018 40F00FF8 		.word	-133173184
 232              		.cfi_endproc
 233              	.LFE3:
 235              		.text
 236              	.Letext0:
 237              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 238              		.file 3 "../Generated_Code/PE_Types.h"
 239              		.file 4 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 LEDRed.c
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:24     .text.LEDRed_Init:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:29     .text.LEDRed_Init:00000000 LEDRed_Init
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:94     .text.LEDRed_Init:00000050 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:103    .text.LEDRed_PutVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:108    .text.LEDRed_PutVal:00000000 LEDRed_PutVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:153    .text.LEDRed_PutVal:00000030 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:158    .text.LEDRed_ClrVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:163    .text.LEDRed_ClrVal:00000000 LEDRed_ClrVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:192    .text.LEDRed_ClrVal:00000018 $d
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:197    .text.LEDRed_SetVal:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:202    .text.LEDRed_SetVal:00000000 LEDRed_SetVal
C:\Users\SAE_LP1\AppData\Local\Temp\ccIn6US1.s:231    .text.LEDRed_SetVal:00000018 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.aba60cd3b17efbc2d56a1d9fc6f583a6
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.03d7426d632bb1a35ec1708754c41daf
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.2dd306b0ccbe86124098bfe3a0b58d88
                           .group:00000000 wm4.ansi_parms.h.64.05090287ebda70c0d79c02b050dca090
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.cstdint.137.268b37259d2d366c21376cbd280e10d7
                           .group:00000000 wm4.PE_Types.h.69.0f70e9553c29a787d42fe2ac9dbd945d
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.61.443ca05468cb0c6bf080e06394e39146
                           .group:00000000 wm4.MKL25Z4.h.61.adbdc31ae5ef570825ab0667cccdf447
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.GPIO_PDD.h.122.b35a34a6eaffa5c552aafe5692260473
                           .group:00000000 wm4.Cpu.h.64.f81ea9fa0d5dd4235933d360f41084fe
                           .group:00000000 wm4.LEDRed.h.103.cd60f4f000b120bf7e7185c12b57c800

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
