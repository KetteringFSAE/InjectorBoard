   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Events.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Cpu_OnNMIINT,"ax",%progbits
  18              		.align	2
  19              		.global	Cpu_OnNMIINT
  20              		.code	16
  21              		.thumb_func
  23              	Cpu_OnNMIINT:
  24              	.LFB0:
  25              		.file 1 "../Sources/Events.c"
   1:../Sources/Events.c **** /** ###################################################################
   2:../Sources/Events.c **** **     Filename    : Events.c
   3:../Sources/Events.c **** **     Project     : ProcessorExpert
   4:../Sources/Events.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/Events.c **** **     Component   : Events
   6:../Sources/Events.c **** **     Version     : Driver 01.00
   7:../Sources/Events.c **** **     Compiler    : GNU C Compiler
   8:../Sources/Events.c **** **     Date/Time   : 2012-08-03, 12:30, # CodeGen: 0
   9:../Sources/Events.c **** **     Abstract    :
  10:../Sources/Events.c **** **         This is user's event module.
  11:../Sources/Events.c **** **         Put your event handler code here.
  12:../Sources/Events.c **** **     Settings    :
  13:../Sources/Events.c **** **     Contents    :
  14:../Sources/Events.c **** **         Cpu_OnNMIINT - void Cpu_OnNMIINT(void);
  15:../Sources/Events.c **** **
  16:../Sources/Events.c **** ** ###################################################################*/
  17:../Sources/Events.c **** /* MODULE Events */
  18:../Sources/Events.c **** 
  19:../Sources/Events.c **** #include "Cpu.h"
  20:../Sources/Events.c **** #include "Events.h"
  21:../Sources/Events.c **** 
  22:../Sources/Events.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  23:../Sources/Events.c **** #include "Common.h"
  24:../Sources/Events.c **** 
  25:../Sources/Events.c **** /*
  26:../Sources/Events.c **** ** ===================================================================
  27:../Sources/Events.c **** **     Event       :  Cpu_OnNMIINT (module Events)
  28:../Sources/Events.c **** **
  29:../Sources/Events.c **** **     Component   :  Cpu [MKL25Z128LK4]
  30:../Sources/Events.c **** **     Description :
  31:../Sources/Events.c **** **         This event is called when the Non maskable interrupt had
  32:../Sources/Events.c **** **         occurred. This event is automatically enabled when the <NMI
  33:../Sources/Events.c **** **         interrrupt> property is set to 'Enabled'.
  34:../Sources/Events.c **** **     Parameters  : None
  35:../Sources/Events.c **** **     Returns     : Nothing
  36:../Sources/Events.c **** ** ===================================================================
  37:../Sources/Events.c **** */
  38:../Sources/Events.c **** void Cpu_OnNMIINT(void)
  39:../Sources/Events.c **** {
  26              		.loc 1 39 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
  40:../Sources/Events.c ****   /* Write your code here ... */
  41:../Sources/Events.c **** }
  36              		.loc 1 41 0
  37 0004 BD46     		mov	sp, r7
  38              		@ sp needed for prologue
  39 0006 80BD     		pop	{r7, pc}
  40              		.cfi_endproc
  41              	.LFE0:
  43              		.section	.text.I2C_OnMasterBlockSent,"ax",%progbits
  44              		.align	2
  45              		.global	I2C_OnMasterBlockSent
  46              		.code	16
  47              		.thumb_func
  49              	I2C_OnMasterBlockSent:
  50              	.LFB1:
  42:../Sources/Events.c **** 
  43:../Sources/Events.c **** /*
  44:../Sources/Events.c **** ** ===================================================================
  45:../Sources/Events.c **** **     Event       :  I2C_OnMasterBlockSent (module Events)
  46:../Sources/Events.c **** **
  47:../Sources/Events.c **** **     Component   :  I2C [I2C_LDD]
  48:../Sources/Events.c **** **     Description :
  49:../Sources/Events.c **** **         This event is called when I2C in master mode finishes the
  50:../Sources/Events.c **** **         transmission of the data successfully. This event is not
  51:../Sources/Events.c **** **         available for the SLAVE mode and if MasterSendBlock is
  52:../Sources/Events.c **** **         disabled. 
  53:../Sources/Events.c **** **     Parameters  :
  54:../Sources/Events.c **** **         NAME            - DESCRIPTION
  55:../Sources/Events.c **** **       * UserDataPtr     - Pointer to the user or
  56:../Sources/Events.c **** **                           RTOS specific data. This pointer is passed
  57:../Sources/Events.c **** **                           as the parameter of Init method.
  58:../Sources/Events.c **** **     Returns     : Nothing
  59:../Sources/Events.c **** ** ===================================================================
  60:../Sources/Events.c **** */
  61:../Sources/Events.c **** void I2C_OnMasterBlockSent(LDD_TUserData *UserDataPtr)
  62:../Sources/Events.c **** {
  51              		.loc 1 62 0
  52              		.cfi_startproc
  53 0000 80B5     		push	{r7, lr}
  54              	.LCFI2:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 84B0     		sub	sp, sp, #16
  59              	.LCFI3:
  60              		.cfi_def_cfa_offset 24
  61 0004 00AF     		add	r7, sp, #0
  62              	.LCFI4:
  63              		.cfi_def_cfa_register 7
  64 0006 7860     		str	r0, [r7, #4]
  63:../Sources/Events.c ****   TDataState *DataState = (TDataState*)UserDataPtr;
  65              		.loc 1 63 0
  66 0008 7B68     		ldr	r3, [r7, #4]
  67 000a FB60     		str	r3, [r7, #12]
  64:../Sources/Events.c ****   DataState->Sent = TRUE;
  68              		.loc 1 64 0
  69 000c FB68     		ldr	r3, [r7, #12]
  70 000e 0122     		mov	r2, #1
  71 0010 1A70     		strb	r2, [r3]
  65:../Sources/Events.c **** }
  72              		.loc 1 65 0
  73 0012 BD46     		mov	sp, r7
  74 0014 04B0     		add	sp, sp, #16
  75              		@ sp needed for prologue
  76 0016 80BD     		pop	{r7, pc}
  77              		.cfi_endproc
  78              	.LFE1:
  80              		.section	.text.I2C_OnMasterBlockReceived,"ax",%progbits
  81              		.align	2
  82              		.global	I2C_OnMasterBlockReceived
  83              		.code	16
  84              		.thumb_func
  86              	I2C_OnMasterBlockReceived:
  87              	.LFB2:
  66:../Sources/Events.c **** 
  67:../Sources/Events.c **** /*
  68:../Sources/Events.c **** ** ===================================================================
  69:../Sources/Events.c **** **     Event       :  I2C_OnMasterBlockReceived (module Events)
  70:../Sources/Events.c **** **
  71:../Sources/Events.c **** **     Component   :  I2C [I2C_LDD]
  72:../Sources/Events.c **** **     Description :
  73:../Sources/Events.c **** **         This event is called when I2C is in master mode and finishes
  74:../Sources/Events.c **** **         the reception of the data successfully. This event is not
  75:../Sources/Events.c **** **         available for the SLAVE mode and if MasterReceiveBlock is
  76:../Sources/Events.c **** **         disabled.
  77:../Sources/Events.c **** **     Parameters  :
  78:../Sources/Events.c **** **         NAME            - DESCRIPTION
  79:../Sources/Events.c **** **       * UserDataPtr     - Pointer to the user or
  80:../Sources/Events.c **** **                           RTOS specific data. This pointer is passed
  81:../Sources/Events.c **** **                           as the parameter of Init method.
  82:../Sources/Events.c **** **     Returns     : Nothing
  83:../Sources/Events.c **** ** ===================================================================
  84:../Sources/Events.c **** */
  85:../Sources/Events.c **** void I2C_OnMasterBlockReceived(LDD_TUserData *UserDataPtr)
  86:../Sources/Events.c **** {
  88              		.loc 1 86 0
  89              		.cfi_startproc
  90 0000 80B5     		push	{r7, lr}
  91              	.LCFI5:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
  95 0002 84B0     		sub	sp, sp, #16
  96              	.LCFI6:
  97              		.cfi_def_cfa_offset 24
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI7:
 100              		.cfi_def_cfa_register 7
 101 0006 7860     		str	r0, [r7, #4]
  87:../Sources/Events.c ****   TDataState *DataState = (TDataState*)UserDataPtr;
 102              		.loc 1 87 0
 103 0008 7B68     		ldr	r3, [r7, #4]
 104 000a FB60     		str	r3, [r7, #12]
  88:../Sources/Events.c ****   DataState->Received = TRUE;
 105              		.loc 1 88 0
 106 000c FB68     		ldr	r3, [r7, #12]
 107 000e 0122     		mov	r2, #1
 108 0010 5A70     		strb	r2, [r3, #1]
  89:../Sources/Events.c **** }
 109              		.loc 1 89 0
 110 0012 BD46     		mov	sp, r7
 111 0014 04B0     		add	sp, sp, #16
 112              		@ sp needed for prologue
 113 0016 80BD     		pop	{r7, pc}
 114              		.cfi_endproc
 115              	.LFE2:
 117              		.section	.text.Cpu_OnNMIINT00,"ax",%progbits
 118              		.align	2
 119              		.global	Cpu_OnNMIINT00
 120              		.code	16
 121              		.thumb_func
 123              	Cpu_OnNMIINT00:
 124              	.LFB3:
  90:../Sources/Events.c **** 
  91:../Sources/Events.c **** /*
  92:../Sources/Events.c **** ** ===================================================================
  93:../Sources/Events.c **** **     Event       :  Cpu_OnNMIINT00 (module Events)
  94:../Sources/Events.c **** **
  95:../Sources/Events.c **** **     Component   :  Cpu [MKL25Z128LK4]
  96:../Sources/Events.c **** **     Description :
  97:../Sources/Events.c **** **         This event is called when the Non maskable interrupt had
  98:../Sources/Events.c **** **         occurred. This event is automatically enabled when the <NMI
  99:../Sources/Events.c **** **         interrrupt> property is set to 'Enabled'.
 100:../Sources/Events.c **** **     Parameters  : None
 101:../Sources/Events.c **** **     Returns     : Nothing
 102:../Sources/Events.c **** ** ===================================================================
 103:../Sources/Events.c **** */
 104:../Sources/Events.c **** void Cpu_OnNMIINT00(void)
 105:../Sources/Events.c **** {
 125              		.loc 1 105 0
 126              		.cfi_startproc
 127 0000 80B5     		push	{r7, lr}
 128              	.LCFI8:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 00AF     		add	r7, sp, #0
 133              	.LCFI9:
 134              		.cfi_def_cfa_register 7
 106:../Sources/Events.c ****   /* Write your code here ... */
 107:../Sources/Events.c **** }
 135              		.loc 1 107 0
 136 0004 BD46     		mov	sp, r7
 137              		@ sp needed for prologue
 138 0006 80BD     		pop	{r7, pc}
 139              		.cfi_endproc
 140              	.LFE3:
 142              		.text
 143              	.Letext0:
 144              		.file 2 "../Sources/Common.h"
 145              		.file 3 "C:/Users/SAE_LP1/workspace/InjBoard/Generated_Code/PE_Types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Events.c
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:18     .text.Cpu_OnNMIINT:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:23     .text.Cpu_OnNMIINT:00000000 Cpu_OnNMIINT
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:44     .text.I2C_OnMasterBlockSent:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:49     .text.I2C_OnMasterBlockSent:00000000 I2C_OnMasterBlockSent
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:81     .text.I2C_OnMasterBlockReceived:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:86     .text.I2C_OnMasterBlockReceived:00000000 I2C_OnMasterBlockReceived
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:118    .text.Cpu_OnNMIINT00:00000000 $t
C:\Users\SAE_LP1\AppData\Local\Temp\ccwBiLDJ.s:123    .text.Cpu_OnNMIINT00:00000000 Cpu_OnNMIINT00
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.aba60cd3b17efbc2d56a1d9fc6f583a6
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.03d7426d632bb1a35ec1708754c41daf
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.2dd306b0ccbe86124098bfe3a0b58d88
                           .group:00000000 wm4.ansi_parms.h.64.05090287ebda70c0d79c02b050dca090
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.cstdint.137.268b37259d2d366c21376cbd280e10d7
                           .group:00000000 wm4.PE_Types.h.69.0f70e9553c29a787d42fe2ac9dbd945d
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.61.443ca05468cb0c6bf080e06394e39146
                           .group:00000000 wm4.MKL25Z4.h.61.adbdc31ae5ef570825ab0667cccdf447
                           .group:00000000 wm4.Cpu.h.78.e1dd9945a5e7ab9c31a38ba183a322df
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.va_list.h.9.b0bb078841c0305c2667a31da10a9070
                           .group:00000000 wm4.file_struc.h.13.79700b909bfbc91e5b3cffa0100f62cf
                           .group:00000000 wm4.stdarg.ARM.h.9.32516e68edcca81ab31f48f233894821
                           .group:00000000 wm4.stdio_api.h.71.3b2f2f9a22fa2b89114b19a43e47537d
                           .group:00000000 wm4.cstdio.1186.6c7f5c80aaa542dbe41dde866b3043d9
                           .group:00000000 wm4.IO1.h.123.12a3ddb175f8510413e272cf486b6f13
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.TPM_PDD.h.47.938deaa7335b1be1e86f1f3ea98af3d6
                           .group:00000000 wm4.TU1.h.131.b88ff748c6c68c5a4fb5a26e2d236fa3
                           .group:00000000 wm4.PWM1.h.115.680dc27522312ce22703fe373ae9c8c9
                           .group:00000000 wm4.GPIO_PDD.h.9.194cb77f647f40e9013b4c76617a0f52
                           .group:00000000 wm4.LEDRed.h.103.cd60f4f000b120bf7e7185c12b57c800
                           .group:00000000 wm4.LEDGreen.h.82.6bfe1b791f43b4324e0dea73e093527e
                           .group:00000000 wm4.CSBit.h.82.ff7132ae69077fd0e7e8f415499ed4b0
                           .group:00000000 wm4.PORT_PDD.h.9.e24435d4c3cbcc67beceb9e359966485
                           .group:00000000 wm4.GPIO1.h.124.b7ee380ef904b55819a5c75398eefb42

NO UNDEFINED SYMBOLS
